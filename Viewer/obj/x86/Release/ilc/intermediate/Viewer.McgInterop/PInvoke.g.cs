#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 32-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The 'McgInterop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace McgInterop
{
	/// <summary>
	/// P/Invoke class for module 'SharingClient'
	/// </summary>
	public unsafe static partial class SharingClient
	{
		// Signature, kInvalidSocketID_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "kInvalidSocketID_get")]
		public static ulong kInvalidSocketID_get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.kInvalidSocketID_get();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, kInvalidConnectionGUID_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "kInvalidConnectionGUID_get")]
		public static ulong kInvalidConnectionGUID_get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.kInvalidConnectionGUID_get();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, delete_Receipt, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Receipt")]
		public static void delete_Receipt(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Receipt(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Receipt_Clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Receipt_Clear")]
		public static void Receipt_Clear(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Receipt_Clear(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_Receipt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_Receipt")]
		public static global::System.IntPtr new_Receipt()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_Receipt();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, delete_LogManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_LogManager")]
		public static void delete_LogManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_LogManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, LogManager_Log, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LogManager_Log")]
		public static void LogManager_Log(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					string jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe_jarg3 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg3, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.LogManager_Log(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg3);
			}
		}

		// Signature, delete_LogWriter, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_LogWriter")]
		public static void delete_LogWriter(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_LogWriter(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, LogWriter_WriteLogEntry, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LogWriter_WriteLogEntry")]
		public static void LogWriter_WriteLogEntry(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					string jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe_jarg3 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg3, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.LogWriter_WriteLogEntry(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg3);
			}
		}

		// Signature, LogWriter_WriteLogEntrySwigExplicitLogWriter, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LogWriter_WriteLogEntrySwigExplicitLogWriter")]
		public static void LogWriter_WriteLogEntrySwigExplicitLogWriter(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					string jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe_jarg3 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg3, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.LogWriter_WriteLogEntrySwigExplicitLogWriter(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg3);
			}
		}

		// Signature, new_LogWriter, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_LogWriter")]
		public static global::System.IntPtr new_LogWriter()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_LogWriter();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, LogWriter_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_LogWriter_SwigDelegateLogWriter_0__Viewer__MixedRealityToolkit_Sharing__LogWriter_SwigDelegateLogWriter_0__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LogWriter_director_connect")]
		public static void LogWriter_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.LogWriter_SwigDelegateLogWriter_0__Viewer delegate0)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.LogWriter+SwigDelegateLogWriter_0,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate0
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.LogWriter_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
			}
		}

		// Signature, Log_Info, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Log_Info")]
		public static void Log_Info(string jarg1)
		{
			// Setup
			byte* unsafe_jarg1 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg1, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Log_Info(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg1);
			}
		}

		// Signature, Log_Warning, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Log_Warning")]
		public static void Log_Warning(string jarg1)
		{
			// Setup
			byte* unsafe_jarg1 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg1, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Log_Warning(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg1);
			}
		}

		// Signature, Log_Error, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Log_Error")]
		public static void Log_Error(string jarg1)
		{
			// Setup
			byte* unsafe_jarg1 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg1, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Log_Error(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg1);
			}
		}

		// Signature, new_Log, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_Log")]
		public static global::System.IntPtr new_Log()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_Log();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, delete_Log, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Log")]
		public static void delete_Log(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Log(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_Listener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Listener")]
		public static void delete_Listener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Listener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Listener_UnregisterAll, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Listener_UnregisterAll")]
		public static void Listener_UnregisterAll(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Listener_UnregisterAll(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Listener_IsRegistered, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Listener_IsRegistered")]
		public static bool Listener_IsRegistered(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Listener_IsRegistered(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_Listener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_Listener")]
		public static global::System.IntPtr new_Listener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_Listener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, kInvalidXGuid_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "kInvalidXGuid_get")]
		public static long kInvalidXGuid_get()
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.kInvalidXGuid_get();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, new_XString__SWIG_0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_XString__SWIG_0")]
		public static global::System.IntPtr new_XString__SWIG_0()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_XString__SWIG_0();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, new_XString__SWIG_1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_XString__SWIG_1")]
		public static global::System.IntPtr new_XString__SWIG_1(string jarg1)
		{
			// Setup
			byte* unsafe_jarg1 = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg1, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.new_XString__SWIG_1(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg1);
			}
		}

		// Signature, delete_XString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_XString")]
		public static void delete_XString(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_XString(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, XString_GetLength, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "XString_GetLength")]
		public static uint XString_GetLength(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			uint unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.XString_GetLength(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, XString_IsEqual, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "XString_IsEqual")]
		public static bool XString_IsEqual(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.XString_IsEqual(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, XString_GetString, [fwd] [return] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "XString_GetString")]
		public static string XString_GetString(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe___value = default(byte*);
			string __value = default(string);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = (byte*)global::McgInterop.SharingClient_PInvokes.XString_GetString(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = global::System.Runtime.InteropServices.McgMarshal.AnsiStringToString(unsafe___value);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe___value);
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Write__SWIG_0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Write__SWIG_0")]
		public static void NetworkOutMessage_Write__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					byte jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Write__SWIG_0(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Write__SWIG_1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] short__short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Write__SWIG_1")]
		public static void NetworkOutMessage_Write__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					short jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Write__SWIG_1(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Write__SWIG_2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Write__SWIG_2")]
		public static void NetworkOutMessage_Write__SWIG_2(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Write__SWIG_2(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Write__SWIG_3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Write__SWIG_3")]
		public static void NetworkOutMessage_Write__SWIG_3(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Write__SWIG_3(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Write__SWIG_4, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Write__SWIG_4")]
		public static void NetworkOutMessage_Write__SWIG_4(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					float jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Write__SWIG_4(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Write__SWIG_5, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Write__SWIG_5")]
		public static void NetworkOutMessage_Write__SWIG_5(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					double jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Write__SWIG_5(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Write__SWIG_6, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Write__SWIG_6")]
		public static void NetworkOutMessage_Write__SWIG_6(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Write__SWIG_6(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkOutMessage_WriteArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_WriteArray")]
		public static void NetworkOutMessage_WriteArray(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.IntPtr jarg2, 
					uint jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_WriteArray(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkOutMessage_Reset, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkOutMessage_Reset")]
		public static void NetworkOutMessage_Reset(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkOutMessage_Reset(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_NetworkOutMessage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_NetworkOutMessage")]
		public static void delete_NetworkOutMessage(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_NetworkOutMessage(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_NetworkInMessage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_NetworkInMessage")]
		public static void delete_NetworkInMessage(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_NetworkInMessage(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadByte, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadByte")]
		public static byte NetworkInMessage_ReadByte(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadByte(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadInt16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] short__short, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadInt16")]
		public static short NetworkInMessage_ReadInt16(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			short unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadInt16(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadInt32, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadInt32")]
		public static int NetworkInMessage_ReadInt32(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadInt32(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadInt64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadInt64")]
		public static long NetworkInMessage_ReadInt64(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			long unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadInt64(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadFloat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadFloat")]
		public static float NetworkInMessage_ReadFloat(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			float unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadFloat(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadDouble")]
		public static double NetworkInMessage_ReadDouble(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			double unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadDouble(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadString, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadString")]
		public static global::System.IntPtr NetworkInMessage_ReadString(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadString(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_ReadArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_ReadArray")]
		public static void NetworkInMessage_ReadArray(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.IntPtr jarg2, 
					uint jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkInMessage_ReadArray(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_GetUnreadBitsCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_GetUnreadBitsCount")]
		public static int NetworkInMessage_GetUnreadBitsCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_GetUnreadBitsCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkInMessage_GetSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkInMessage_GetSize")]
		public static int NetworkInMessage_GetSize(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkInMessage_GetSize(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_NetworkConnectionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_NetworkConnectionListener")]
		public static void delete_NetworkConnectionListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_NetworkConnectionListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnConnected, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnConnected")]
		public static void NetworkConnectionListener_OnConnected(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnConnected(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener")]
		public static void NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnConnectFailed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnConnectFailed")]
		public static void NetworkConnectionListener_OnConnectFailed(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnConnectFailed(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener")]
		public static void NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnDisconnected, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnDisconnected")]
		public static void NetworkConnectionListener_OnDisconnected(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnDisconnected(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener")]
		public static void NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnMessageReceived, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnMessageReceived")]
		public static void NetworkConnectionListener_OnMessageReceived(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnMessageReceived(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener")]
		public static void NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, new_NetworkConnectionListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_NetworkConnectionListener")]
		public static global::System.IntPtr new_NetworkConnectionListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_NetworkConnectionListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, NetworkConnectionListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_NetworkConnectionListener_SwigDelegateNetworkConnectionListener_0__Viewer__MixedRealityToolkit_Sharing__NetworkConnectionListener_SwigDelegateNetworkConnectionListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_NetworkConnectionListener_SwigDelegateNetworkConnectionListener_1__Viewer__MixedRealityToolkit_Sharing__NetworkConnectionListener_SwigDelegateNetworkConnectionListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_NetworkConnectionListener_SwigDelegateNetworkConnectionListener_2__Viewer__MixedRealityToolkit_Sharing__NetworkConnectionListener_SwigDelegateNetworkConnectionListener_2__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_NetworkConnectionListener_SwigDelegateNetworkConnectionListener_3__Viewer__MixedRealityToolkit_Sharing__NetworkConnectionListener_SwigDelegateNetworkConnectionListener_3__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_director_connect")]
		public static void NetworkConnectionListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.NetworkConnectionListener_SwigDelegateNetworkConnectionListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.NetworkConnectionListener_SwigDelegateNetworkConnectionListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.NetworkConnectionListener_SwigDelegateNetworkConnectionListener_2__Viewer delegate2, 
					global::MixedRealityToolkit.Sharing.NetworkConnectionListener_SwigDelegateNetworkConnectionListener_3__Viewer delegate3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			void* unsafe_delegate3 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.NetworkConnectionListener+SwigDelegateNetworkConnectionListener_0,Viewer, Version=1." +
											"0.0.0, Culture=neutral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.NetworkConnectionListener+SwigDelegateNetworkConnectionListener_1,Viewer, Version=1." +
											"0.0.0, Culture=neutral, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.NetworkConnectionListener+SwigDelegateNetworkConnectionListener_2,Viewer, Version=1." +
											"0.0.0, Culture=neutral, PublicKeyToken=null"), 
									delegate2
								);
				unsafe_delegate3 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.NetworkConnectionListener+SwigDelegateNetworkConnectionListener_3,Viewer, Version=1." +
											"0.0.0, Culture=neutral, PublicKeyToken=null"), 
									delegate3
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2, 
									unsafe_delegate3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
				global::System.GC.KeepAlive(delegate3);
			}
		}

		// Signature, User_GetName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "User_GetName")]
		public static global::System.IntPtr User_GetName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.User_GetName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, User_GetID, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "User_GetID")]
		public static int User_GetID(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.User_GetID(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, User_IsValid, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "User_IsValid")]
		public static bool User_IsValid(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.User_IsValid(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, User_GetMuteState, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "User_GetMuteState")]
		public static bool User_GetMuteState(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.User_GetMuteState(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_User, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_User")]
		public static void delete_User(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_User(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkConnection_IsConnected, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_IsConnected")]
		public static bool NetworkConnection_IsConnected(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkConnection_IsConnected(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkConnection_GetConnectionGUID, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_GetConnectionGUID")]
		public static ulong NetworkConnection_GetConnectionGUID(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			ulong unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkConnection_GetConnectionGUID(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkConnection_Send__SWIG_0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Send__SWIG_0")]
		public static void NetworkConnection_Send__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5, 
					bool jarg6)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			sbyte unsafe_jarg6;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg6 = (jarg6 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Send__SWIG_0(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									jarg4, 
									jarg5, 
									unsafe_jarg6
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Send__SWIG_1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Send__SWIG_1")]
		public static void NetworkConnection_Send__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Send__SWIG_1(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									jarg4, 
									jarg5
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Send__SWIG_2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Send__SWIG_2")]
		public static void NetworkConnection_Send__SWIG_2(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					int jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Send__SWIG_2(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Send__SWIG_3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Send__SWIG_3")]
		public static void NetworkConnection_Send__SWIG_3(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Send__SWIG_3(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Send__SWIG_4, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Send__SWIG_4")]
		public static void NetworkConnection_Send__SWIG_4(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Send__SWIG_4(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_SendTo__SWIG_0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_SendTo__SWIG_0")]
		public static void NetworkConnection_SendTo__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4, 
					int jarg5, 
					int jarg6, 
					int jarg7, 
					bool jarg8)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			sbyte unsafe_jarg8;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg4 = jarg4.handle;
				unsafe_jarg8 = (jarg8 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_SendTo__SWIG_0(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									unsafe_jarg4, 
									jarg5, 
									jarg6, 
									jarg7, 
									unsafe_jarg8
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, NetworkConnection_SendTo__SWIG_1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_SendTo__SWIG_1")]
		public static void NetworkConnection_SendTo__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4, 
					int jarg5, 
					int jarg6, 
					int jarg7)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg4 = jarg4.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_SendTo__SWIG_1(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									unsafe_jarg4, 
									jarg5, 
									jarg6, 
									jarg7
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, NetworkConnection_SendTo__SWIG_2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_SendTo__SWIG_2")]
		public static void NetworkConnection_SendTo__SWIG_2(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4, 
					int jarg5, 
					int jarg6)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg4 = jarg4.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_SendTo__SWIG_2(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									unsafe_jarg4, 
									jarg5, 
									jarg6
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, NetworkConnection_SendTo__SWIG_3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_SendTo__SWIG_3")]
		public static void NetworkConnection_SendTo__SWIG_3(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4, 
					int jarg5)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg4 = jarg4.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_SendTo__SWIG_3(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									unsafe_jarg4, 
									jarg5
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, NetworkConnection_SendTo__SWIG_4, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_SendTo__SWIG_4")]
		public static void NetworkConnection_SendTo__SWIG_4(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg4 = jarg4.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_SendTo__SWIG_4(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									unsafe_jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, NetworkConnection_Broadcast__SWIG_0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Broadcast__SWIG_0")]
		public static void NetworkConnection_Broadcast__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5, 
					bool jarg6)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			sbyte unsafe_jarg6;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg6 = (jarg6 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Broadcast__SWIG_0(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									jarg4, 
									jarg5, 
									unsafe_jarg6
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Broadcast__SWIG_1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Broadcast__SWIG_1")]
		public static void NetworkConnection_Broadcast__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Broadcast__SWIG_1(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									jarg4, 
									jarg5
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Broadcast__SWIG_2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Broadcast__SWIG_2")]
		public static void NetworkConnection_Broadcast__SWIG_2(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3, 
					int jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Broadcast__SWIG_2(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Broadcast__SWIG_3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Broadcast__SWIG_3")]
		public static void NetworkConnection_Broadcast__SWIG_3(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Broadcast__SWIG_3(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Broadcast__SWIG_4, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Broadcast__SWIG_4")]
		public static void NetworkConnection_Broadcast__SWIG_4(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Broadcast__SWIG_4(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_AddListener")]
		public static void NetworkConnection_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					byte jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_AddListener(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, NetworkConnection_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_RemoveListener")]
		public static void NetworkConnection_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					byte jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_RemoveListener(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, NetworkConnection_AddListenerAsync, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_AddListenerAsync")]
		public static void NetworkConnection_AddListenerAsync(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					byte jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_AddListenerAsync(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, NetworkConnection_RemoveListenerAsync, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_RemoveListenerAsync")]
		public static void NetworkConnection_RemoveListenerAsync(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					byte jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_RemoveListenerAsync(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, NetworkConnection_CreateMessage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_CreateMessage")]
		public static global::System.IntPtr NetworkConnection_CreateMessage(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					byte jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkConnection_CreateMessage(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkConnection_ReturnMessage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_ReturnMessage")]
		public static void NetworkConnection_ReturnMessage(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_ReturnMessage(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, NetworkConnection_Disconnect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_Disconnect")]
		public static void NetworkConnection_Disconnect(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.NetworkConnection_Disconnect(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkConnection_GetRemoteAddress, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnection_GetRemoteAddress")]
		public static global::System.IntPtr NetworkConnection_GetRemoteAddress(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkConnection_GetRemoteAddress(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_NetworkConnection, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_NetworkConnection")]
		public static void delete_NetworkConnection(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_NetworkConnection(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Element_GetElementType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Element_GetElementType")]
		public static int Element_GetElementType(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Element_GetElementType(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Element_GetGUID, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Element_GetGUID")]
		public static long Element_GetGUID(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			long unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Element_GetGUID(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Element_GetName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Element_GetName")]
		public static global::System.IntPtr Element_GetName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Element_GetName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Element_GetParent, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Element_GetParent")]
		public static global::System.IntPtr Element_GetParent(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Element_GetParent(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Element_IsValid, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Element_IsValid")]
		public static bool Element_IsValid(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Element_IsValid(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_Element, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Element")]
		public static void delete_Element(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Element(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, BoolElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "BoolElement_Cast")]
		public static global::System.IntPtr BoolElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.BoolElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, BoolElement_GetValue, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "BoolElement_GetValue")]
		public static bool BoolElement_GetValue(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.BoolElement_GetValue(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, BoolElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "BoolElement_SetValue")]
		public static void BoolElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.BoolElement_SetValue(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_BoolElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_BoolElement")]
		public static void delete_BoolElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_BoolElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntElement_Cast")]
		public static global::System.IntPtr IntElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.IntElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntElement_GetValue")]
		public static int IntElement_GetValue(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.IntElement_GetValue(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntElement_SetValue")]
		public static void IntElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntElement_SetValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_IntElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_IntElement")]
		public static void delete_IntElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_IntElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, LongElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LongElement_Cast")]
		public static global::System.IntPtr LongElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.LongElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, LongElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LongElement_GetValue")]
		public static long LongElement_GetValue(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			long unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.LongElement_GetValue(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, LongElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LongElement_SetValue")]
		public static void LongElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.LongElement_SetValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_LongElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_LongElement")]
		public static void delete_LongElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_LongElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatElement_Cast")]
		public static global::System.IntPtr FloatElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatElement_GetValue")]
		public static float FloatElement_GetValue(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			float unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatElement_GetValue(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatElement_SetValue")]
		public static void FloatElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					float jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatElement_SetValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_FloatElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_FloatElement")]
		public static void delete_FloatElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_FloatElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DoubleElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DoubleElement_Cast")]
		public static global::System.IntPtr DoubleElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DoubleElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DoubleElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DoubleElement_GetValue")]
		public static double DoubleElement_GetValue(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			double unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DoubleElement_GetValue(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DoubleElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DoubleElement_SetValue")]
		public static void DoubleElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					double jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DoubleElement_SetValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_DoubleElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_DoubleElement")]
		public static void delete_DoubleElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_DoubleElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringElement_Cast")]
		public static global::System.IntPtr StringElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.StringElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringElement_GetValue")]
		public static global::System.IntPtr StringElement_GetValue(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.StringElement_GetValue(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringElement_SetValue")]
		public static void StringElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringElement_SetValue(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, delete_StringElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_StringElement")]
		public static void delete_StringElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_StringElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_IntArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_IntArrayListener")]
		public static void delete_IntArrayListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_IntArrayListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayListener_OnValueChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_OnValueChanged")]
		public static void IntArrayListener_OnValueChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayListener_OnValueChanged(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayListener_OnValueChangedSwigExplicitIntArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_OnValueChangedSwigExplicitIntArrayListener")]
		public static void IntArrayListener_OnValueChangedSwigExplicitIntArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayListener_OnValueChangedSwigExplicitIntArrayListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayListener_OnValueInserted, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_OnValueInserted")]
		public static void IntArrayListener_OnValueInserted(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayListener_OnValueInserted(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayListener_OnValueInsertedSwigExplicitIntArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_OnValueInsertedSwigExplicitIntArrayListener")]
		public static void IntArrayListener_OnValueInsertedSwigExplicitIntArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayListener_OnValueInsertedSwigExplicitIntArrayListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayListener_OnValueRemoved, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_OnValueRemoved")]
		public static void IntArrayListener_OnValueRemoved(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayListener_OnValueRemoved(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayListener_OnValueRemovedSwigExplicitIntArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_OnValueRemovedSwigExplicitIntArrayListener")]
		public static void IntArrayListener_OnValueRemovedSwigExplicitIntArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayListener_OnValueRemovedSwigExplicitIntArrayListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_IntArrayListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_IntArrayListener")]
		public static global::System.IntPtr new_IntArrayListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_IntArrayListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, IntArrayListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_IntArrayListener_SwigDelegateIntArrayListener_0__Viewer__MixedRealityToolkit_Sharing__IntArrayListener_SwigDelegateIntArrayListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_IntArrayListener_SwigDelegateIntArrayListener_1__Viewer__MixedRealityToolkit_Sharing__IntArrayListener_SwigDelegateIntArrayListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_IntArrayListener_SwigDelegateIntArrayListener_2__Viewer__MixedRealityToolkit_Sharing__IntArrayListener_SwigDelegateIntArrayListener_2__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_director_connect")]
		public static void IntArrayListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.IntArrayListener_SwigDelegateIntArrayListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.IntArrayListener_SwigDelegateIntArrayListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.IntArrayListener_SwigDelegateIntArrayListener_2__Viewer delegate2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.IntArrayListener+SwigDelegateIntArrayListener_0,Viewer, Version=1.0.0.0, Culture=neu" +
											"tral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.IntArrayListener+SwigDelegateIntArrayListener_1,Viewer, Version=1.0.0.0, Culture=neu" +
											"tral, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.IntArrayListener+SwigDelegateIntArrayListener_2,Viewer, Version=1.0.0.0, Culture=neu" +
											"tral, PublicKeyToken=null"), 
									delegate2
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
			}
		}

		// Signature, IntArrayElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_Cast")]
		public static global::System.IntPtr IntArrayElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.IntArrayElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayElement_GetCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_GetCount")]
		public static int IntArrayElement_GetCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.IntArrayElement_GetCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_GetValue")]
		public static int IntArrayElement_GetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.IntArrayElement_GetValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_SetValue")]
		public static void IntArrayElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayElement_SetValue(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayElement_InsertValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_InsertValue")]
		public static void IntArrayElement_InsertValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayElement_InsertValue(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayElement_RemoveValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_RemoveValue")]
		public static void IntArrayElement_RemoveValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayElement_RemoveValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, IntArrayElement_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_AddListener")]
		public static void IntArrayElement_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayElement_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, IntArrayElement_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_RemoveListener")]
		public static void IntArrayElement_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.IntArrayElement_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, delete_IntArrayElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_IntArrayElement")]
		public static void delete_IntArrayElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_IntArrayElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_FloatArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_FloatArrayListener")]
		public static void delete_FloatArrayListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_FloatArrayListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayListener_OnValueChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_OnValueChanged")]
		public static void FloatArrayListener_OnValueChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayListener_OnValueChanged(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayListener_OnValueChangedSwigExplicitFloatArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_OnValueChangedSwigExplicitFloatArrayListener")]
		public static void FloatArrayListener_OnValueChangedSwigExplicitFloatArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayListener_OnValueChangedSwigExplicitFloatArrayListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayListener_OnValueInserted, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_OnValueInserted")]
		public static void FloatArrayListener_OnValueInserted(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayListener_OnValueInserted(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayListener_OnValueInsertedSwigExplicitFloatArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_OnValueInsertedSwigExplicitFloatArrayListener")]
		public static void FloatArrayListener_OnValueInsertedSwigExplicitFloatArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayListener_OnValueInsertedSwigExplicitFloatArrayListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayListener_OnValueRemoved, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_OnValueRemoved")]
		public static void FloatArrayListener_OnValueRemoved(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayListener_OnValueRemoved(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayListener_OnValueRemovedSwigExplicitFloatArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_OnValueRemovedSwigExplicitFloatArrayListener")]
		public static void FloatArrayListener_OnValueRemovedSwigExplicitFloatArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayListener_OnValueRemovedSwigExplicitFloatArrayListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_FloatArrayListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_FloatArrayListener")]
		public static global::System.IntPtr new_FloatArrayListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_FloatArrayListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FloatArrayListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_FloatArrayListener_SwigDelegateFloatArrayListener_0__Viewer__MixedRealityToolkit_Sharing__FloatArrayListener_SwigDelegateFloatArrayListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_FloatArrayListener_SwigDelegateFloatArrayListener_1__Viewer__MixedRealityToolkit_Sharing__FloatArrayListener_SwigDelegateFloatArrayListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_FloatArrayListener_SwigDelegateFloatArrayListener_2__Viewer__MixedRealityToolkit_Sharing__FloatArrayListener_SwigDelegateFloatArrayListener_2__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_director_connect")]
		public static void FloatArrayListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.FloatArrayListener_SwigDelegateFloatArrayListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.FloatArrayListener_SwigDelegateFloatArrayListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.FloatArrayListener_SwigDelegateFloatArrayListener_2__Viewer delegate2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.FloatArrayListener+SwigDelegateFloatArrayListener_0,Viewer, Version=1.0.0.0, Culture" +
											"=neutral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.FloatArrayListener+SwigDelegateFloatArrayListener_1,Viewer, Version=1.0.0.0, Culture" +
											"=neutral, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.FloatArrayListener+SwigDelegateFloatArrayListener_2,Viewer, Version=1.0.0.0, Culture" +
											"=neutral, PublicKeyToken=null"), 
									delegate2
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
			}
		}

		// Signature, FloatArrayElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_Cast")]
		public static global::System.IntPtr FloatArrayElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatArrayElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayElement_GetCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_GetCount")]
		public static int FloatArrayElement_GetCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatArrayElement_GetCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_GetValue")]
		public static float FloatArrayElement_GetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			float unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatArrayElement_GetValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_SetValue")]
		public static void FloatArrayElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayElement_SetValue(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayElement_InsertValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_InsertValue")]
		public static void FloatArrayElement_InsertValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayElement_InsertValue(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayElement_RemoveValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_RemoveValue")]
		public static void FloatArrayElement_RemoveValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayElement_RemoveValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, FloatArrayElement_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_AddListener")]
		public static void FloatArrayElement_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayElement_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, FloatArrayElement_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_RemoveListener")]
		public static void FloatArrayElement_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.FloatArrayElement_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, delete_FloatArrayElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_FloatArrayElement")]
		public static void delete_FloatArrayElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_FloatArrayElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_StringArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_StringArrayListener")]
		public static void delete_StringArrayListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_StringArrayListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringArrayListener_OnValueChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_OnValueChanged")]
		public static void StringArrayListener_OnValueChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayListener_OnValueChanged(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, StringArrayListener_OnValueChangedSwigExplicitStringArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_OnValueChangedSwigExplicitStringArrayListener")]
		public static void StringArrayListener_OnValueChangedSwigExplicitStringArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayListener_OnValueChangedSwigExplicitStringArrayListener(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, StringArrayListener_OnValueInserted, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_OnValueInserted")]
		public static void StringArrayListener_OnValueInserted(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayListener_OnValueInserted(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, StringArrayListener_OnValueInsertedSwigExplicitStringArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_OnValueInsertedSwigExplicitStringArrayListener")]
		public static void StringArrayListener_OnValueInsertedSwigExplicitStringArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayListener_OnValueInsertedSwigExplicitStringArrayListener(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, StringArrayListener_OnValueRemoved, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_OnValueRemoved")]
		public static void StringArrayListener_OnValueRemoved(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayListener_OnValueRemoved(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, StringArrayListener_OnValueRemovedSwigExplicitStringArrayListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_OnValueRemovedSwigExplicitStringArrayListener")]
		public static void StringArrayListener_OnValueRemovedSwigExplicitStringArrayListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayListener_OnValueRemovedSwigExplicitStringArrayListener(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, new_StringArrayListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_StringArrayListener")]
		public static global::System.IntPtr new_StringArrayListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_StringArrayListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, StringArrayListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_StringArrayListener_SwigDelegateStringArrayListener_0__Viewer__MixedRealityToolkit_Sharing__StringArrayListener_SwigDelegateStringArrayListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_StringArrayListener_SwigDelegateStringArrayListener_1__Viewer__MixedRealityToolkit_Sharing__StringArrayListener_SwigDelegateStringArrayListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_StringArrayListener_SwigDelegateStringArrayListener_2__Viewer__MixedRealityToolkit_Sharing__StringArrayListener_SwigDelegateStringArrayListener_2__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_director_connect")]
		public static void StringArrayListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.StringArrayListener_SwigDelegateStringArrayListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.StringArrayListener_SwigDelegateStringArrayListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.StringArrayListener_SwigDelegateStringArrayListener_2__Viewer delegate2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.StringArrayListener+SwigDelegateStringArrayListener_0,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.StringArrayListener+SwigDelegateStringArrayListener_1,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.StringArrayListener+SwigDelegateStringArrayListener_2,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate2
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
			}
		}

		// Signature, StringArrayElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_Cast")]
		public static global::System.IntPtr StringArrayElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.StringArrayElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringArrayElement_GetCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_GetCount")]
		public static int StringArrayElement_GetCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.StringArrayElement_GetCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringArrayElement_GetValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_GetValue")]
		public static global::System.IntPtr StringArrayElement_GetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.StringArrayElement_GetValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringArrayElement_SetValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_SetValue")]
		public static void StringArrayElement_SetValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayElement_SetValue(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, StringArrayElement_InsertValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_InsertValue")]
		public static void StringArrayElement_InsertValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayElement_InsertValue(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, StringArrayElement_RemoveValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_RemoveValue")]
		public static void StringArrayElement_RemoveValue(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayElement_RemoveValue(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, StringArrayElement_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_AddListener")]
		public static void StringArrayElement_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayElement_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, StringArrayElement_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_RemoveListener")]
		public static void StringArrayElement_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.StringArrayElement_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, delete_StringArrayElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_StringArrayElement")]
		public static void delete_StringArrayElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_StringArrayElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_ObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_ObjectElementListener")]
		public static void delete_ObjectElementListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_ObjectElementListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnBoolElementChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnBoolElementChanged")]
		public static void ObjectElementListener_OnBoolElementChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					bool jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg3;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = (jarg3 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnBoolElementChanged(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnBoolElementChangedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnBoolElementChangedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnBoolElementChangedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					bool jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg3;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = (jarg3 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnBoolElementChangedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnIntElementChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnIntElementChanged")]
		public static void ObjectElementListener_OnIntElementChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnIntElementChanged(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnLongElementChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnLongElementChanged")]
		public static void ObjectElementListener_OnLongElementChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					long jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnLongElementChanged(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnLongElementChangedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnLongElementChangedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnLongElementChangedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					long jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnLongElementChangedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnFloatElementChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnFloatElementChanged")]
		public static void ObjectElementListener_OnFloatElementChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnFloatElementChanged(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnDoubleElementChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnDoubleElementChanged")]
		public static void ObjectElementListener_OnDoubleElementChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					double jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnDoubleElementChanged(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnDoubleElementChangedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnDoubleElementChangedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnDoubleElementChangedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					double jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnDoubleElementChangedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnStringElementChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnStringElementChanged")]
		public static void ObjectElementListener_OnStringElementChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnStringElementChanged(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnElementAdded, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnElementAdded")]
		public static void ObjectElementListener_OnElementAdded(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnElementAdded(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnElementDeleted, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnElementDeleted")]
		public static void ObjectElementListener_OnElementDeleted(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnElementDeleted(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener")]
		public static void ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, new_ObjectElementListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_ObjectElementListener")]
		public static global::System.IntPtr new_ObjectElementListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_ObjectElementListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ObjectElementListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_0__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_1__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_2__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_2__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_3__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_3__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_4__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_4__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_5__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_5__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_6__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_6__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_ObjectElementListener_SwigDelegateObjectElementListener_7__Viewer__MixedRealityToolkit_Sharing__ObjectElementListener_SwigDelegateObjectElementListener_7__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_director_connect")]
		public static void ObjectElementListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_2__Viewer delegate2, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_3__Viewer delegate3, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_4__Viewer delegate4, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_5__Viewer delegate5, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_6__Viewer delegate6, 
					global::MixedRealityToolkit.Sharing.ObjectElementListener_SwigDelegateObjectElementListener_7__Viewer delegate7)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			void* unsafe_delegate3 = default(void*);
			void* unsafe_delegate4 = default(void*);
			void* unsafe_delegate5 = default(void*);
			void* unsafe_delegate6 = default(void*);
			void* unsafe_delegate7 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_0,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_1,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_2,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate2
								);
				unsafe_delegate3 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_3,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate3
								);
				unsafe_delegate4 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_4,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate4
								);
				unsafe_delegate5 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_5,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate5
								);
				unsafe_delegate6 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_6,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate6
								);
				unsafe_delegate7 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.ObjectElementListener+SwigDelegateObjectElementListener_7,Viewer, Version=1.0.0.0, C" +
											"ulture=neutral, PublicKeyToken=null"), 
									delegate7
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElementListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2, 
									unsafe_delegate3, 
									unsafe_delegate4, 
									unsafe_delegate5, 
									unsafe_delegate6, 
									unsafe_delegate7
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
				global::System.GC.KeepAlive(delegate3);
				global::System.GC.KeepAlive(delegate4);
				global::System.GC.KeepAlive(delegate5);
				global::System.GC.KeepAlive(delegate6);
				global::System.GC.KeepAlive(delegate7);
			}
		}

		// Signature, ObjectElement_Cast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_Cast")]
		public static global::System.IntPtr ObjectElement_Cast(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_Cast(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElement_CreateBoolElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateBoolElement")]
		public static global::System.IntPtr ObjectElement_CreateBoolElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					bool jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			sbyte unsafe_jarg3;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = (jarg3 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateBoolElement(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_CreateIntElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateIntElement")]
		public static global::System.IntPtr ObjectElement_CreateIntElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateIntElement(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_CreateLongElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateLongElement")]
		public static global::System.IntPtr ObjectElement_CreateLongElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					long jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateLongElement(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_CreateFloatElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateFloatElement")]
		public static global::System.IntPtr ObjectElement_CreateFloatElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					float jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateFloatElement(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_CreateDoubleElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateDoubleElement")]
		public static global::System.IntPtr ObjectElement_CreateDoubleElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					double jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateDoubleElement(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_CreateStringElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateStringElement")]
		public static global::System.IntPtr ObjectElement_CreateStringElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateStringElement(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, ObjectElement_CreateObjectElement__SWIG_0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateObjectElement__SWIG_0")]
		public static global::System.IntPtr ObjectElement_CreateObjectElement__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				unsafe_jarg4 = jarg4.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateObjectElement__SWIG_0(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3, 
									unsafe_jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, ObjectElement_CreateObjectElement__SWIG_1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateObjectElement__SWIG_1")]
		public static global::System.IntPtr ObjectElement_CreateObjectElement__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateObjectElement__SWIG_1(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, ObjectElement_CreateIntArrayElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateIntArrayElement")]
		public static global::System.IntPtr ObjectElement_CreateIntArrayElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateIntArrayElement(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_CreateFloatArrayElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateFloatArrayElement")]
		public static global::System.IntPtr ObjectElement_CreateFloatArrayElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateFloatArrayElement(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_CreateStringArrayElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_CreateStringArrayElement")]
		public static global::System.IntPtr ObjectElement_CreateStringArrayElement(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_CreateStringArrayElement(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_GetElementCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_GetElementCount")]
		public static int ObjectElement_GetElementCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_GetElementCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElement_GetElement__SWIG_0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_GetElement__SWIG_0")]
		public static global::System.IntPtr ObjectElement_GetElement__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_GetElement__SWIG_0(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElement_GetElement__SWIG_1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_GetElement__SWIG_1")]
		public static global::System.IntPtr ObjectElement_GetElement__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_GetElement__SWIG_1(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_GetElementAt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_GetElementAt")]
		public static global::System.IntPtr ObjectElement_GetElementAt(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_GetElementAt(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElement_RemoveElement__SWIG_0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_RemoveElement__SWIG_0")]
		public static void ObjectElement_RemoveElement__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElement_RemoveElement__SWIG_0(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_RemoveElement__SWIG_1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_RemoveElement__SWIG_1")]
		public static void ObjectElement_RemoveElement__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					long jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElement_RemoveElement__SWIG_1(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElement_RemoveElementAt, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_RemoveElementAt")]
		public static void ObjectElement_RemoveElementAt(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElement_RemoveElementAt(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElement_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_AddListener")]
		public static void ObjectElement_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElement_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_RemoveListener")]
		public static void ObjectElement_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ObjectElement_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ObjectElement_GetOwnerID, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_GetOwnerID")]
		public static int ObjectElement_GetOwnerID(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_GetOwnerID(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ObjectElement_GetObjectType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_GetObjectType")]
		public static global::System.IntPtr ObjectElement_GetObjectType(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_GetObjectType(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_ObjectElement, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_ObjectElement")]
		public static void delete_ObjectElement(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_ObjectElement(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SyncListener_OnSyncChangesBegin, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SyncListener_OnSyncChangesBegin")]
		public static void SyncListener_OnSyncChangesBegin(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SyncListener_OnSyncChangesBegin(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SyncListener_OnSyncChangesBeginSwigExplicitSyncListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SyncListener_OnSyncChangesBeginSwigExplicitSyncListener")]
		public static void SyncListener_OnSyncChangesBeginSwigExplicitSyncListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SyncListener_OnSyncChangesBeginSwigExplicitSyncListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SyncListener_OnSyncChangesEnd, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SyncListener_OnSyncChangesEnd")]
		public static void SyncListener_OnSyncChangesEnd(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SyncListener_OnSyncChangesEnd(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SyncListener_OnSyncChangesEndSwigExplicitSyncListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SyncListener_OnSyncChangesEndSwigExplicitSyncListener")]
		public static void SyncListener_OnSyncChangesEndSwigExplicitSyncListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SyncListener_OnSyncChangesEndSwigExplicitSyncListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_SyncListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_SyncListener")]
		public static global::System.IntPtr new_SyncListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_SyncListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, delete_SyncListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_SyncListener")]
		public static void delete_SyncListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_SyncListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SyncListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SyncListener_SwigDelegateSyncListener_0__Viewer__MixedRealityToolkit_Sharing__SyncListener_SwigDelegateSyncListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SyncListener_SwigDelegateSyncListener_1__Viewer__MixedRealityToolkit_Sharing__SyncListener_SwigDelegateSyncListener_1__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SyncListener_director_connect")]
		public static void SyncListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.SyncListener_SwigDelegateSyncListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.SyncListener_SwigDelegateSyncListener_1__Viewer delegate1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SyncListener+SwigDelegateSyncListener_0,Viewer, Version=1.0.0.0, Culture=neutral, Pu" +
											"blicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SyncListener+SwigDelegateSyncListener_1,Viewer, Version=1.0.0.0, Culture=neutral, Pu" +
											"blicKeyToken=null"), 
									delegate1
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SyncListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
			}
		}

		// Signature, delete_SessionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_SessionListener")]
		public static void delete_SessionListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_SessionListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnJoiningSession, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnJoiningSession")]
		public static void SessionListener_OnJoiningSession(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnJoiningSession(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnJoiningSessionSwigExplicitSessionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnJoiningSessionSwigExplicitSessionListener")]
		public static void SessionListener_OnJoiningSessionSwigExplicitSessionListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnJoiningSessionSwigExplicitSessionListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnJoinSucceeded, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnJoinSucceeded")]
		public static void SessionListener_OnJoinSucceeded(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnJoinSucceeded(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnJoinSucceededSwigExplicitSessionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnJoinSucceededSwigExplicitSessionListener")]
		public static void SessionListener_OnJoinSucceededSwigExplicitSessionListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnJoinSucceededSwigExplicitSessionListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnJoinFailed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnJoinFailed")]
		public static void SessionListener_OnJoinFailed(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnJoinFailed(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnJoinFailedSwigExplicitSessionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnJoinFailedSwigExplicitSessionListener")]
		public static void SessionListener_OnJoinFailedSwigExplicitSessionListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnJoinFailedSwigExplicitSessionListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnSessionDisconnected, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnSessionDisconnected")]
		public static void SessionListener_OnSessionDisconnected(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnSessionDisconnected(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionListener_OnSessionDisconnectedSwigExplicitSessionListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_OnSessionDisconnectedSwigExplicitSessionListener")]
		public static void SessionListener_OnSessionDisconnectedSwigExplicitSessionListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_OnSessionDisconnectedSwigExplicitSessionListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_SessionListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_SessionListener")]
		public static global::System.IntPtr new_SessionListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_SessionListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, SessionListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionListener_SwigDelegateSessionListener_0__Viewer__MixedRealityToolkit_Sharing__SessionListener_SwigDelegateSessionListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionListener_SwigDelegateSessionListener_1__Viewer__MixedRealityToolkit_Sharing__SessionListener_SwigDelegateSessionListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionListener_SwigDelegateSessionListener_2__Viewer__MixedRealityToolkit_Sharing__SessionListener_SwigDelegateSessionListener_2__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionListener_SwigDelegateSessionListener_3__Viewer__MixedRealityToolkit_Sharing__SessionListener_SwigDelegateSessionListener_3__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_director_connect")]
		public static void SessionListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.SessionListener_SwigDelegateSessionListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.SessionListener_SwigDelegateSessionListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.SessionListener_SwigDelegateSessionListener_2__Viewer delegate2, 
					global::MixedRealityToolkit.Sharing.SessionListener_SwigDelegateSessionListener_3__Viewer delegate3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			void* unsafe_delegate3 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionListener+SwigDelegateSessionListener_0,Viewer, Version=1.0.0.0, Culture=neutr" +
											"al, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionListener+SwigDelegateSessionListener_1,Viewer, Version=1.0.0.0, Culture=neutr" +
											"al, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionListener+SwigDelegateSessionListener_2,Viewer, Version=1.0.0.0, Culture=neutr" +
											"al, PublicKeyToken=null"), 
									delegate2
								);
				unsafe_delegate3 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionListener+SwigDelegateSessionListener_3,Viewer, Version=1.0.0.0, Culture=neutr" +
											"al, PublicKeyToken=null"), 
									delegate3
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2, 
									unsafe_delegate3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
				global::System.GC.KeepAlive(delegate3);
			}
		}

		// Signature, Session_GetMachineSessionState, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_GetMachineSessionState")]
		public static int Session_GetMachineSessionState(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_GetMachineSessionState(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_AddListener")]
		public static void Session_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Session_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, Session_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_RemoveListener")]
		public static void Session_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Session_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, Session_IsJoined, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_IsJoined")]
		public static bool Session_IsJoined(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_IsJoined(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_Join, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_Join")]
		public static bool Session_Join(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_Join(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_Leave, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_Leave")]
		public static void Session_Leave(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Session_Leave(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_GetUserCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_GetUserCount")]
		public static int Session_GetUserCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_GetUserCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_GetUser, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_GetUser")]
		public static global::System.IntPtr Session_GetUser(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_GetUser(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_GetSessionType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_GetSessionType")]
		public static int Session_GetSessionType(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_GetSessionType(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_GetName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_GetName")]
		public static global::System.IntPtr Session_GetName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_GetName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Session_GetSessionNetworkConnection, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Session_GetSessionNetworkConnection")]
		public static global::System.IntPtr Session_GetSessionNetworkConnection(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Session_GetSessionNetworkConnection(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_Session, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Session")]
		public static void delete_Session(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Session(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_SessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_SessionManagerListener")]
		public static void delete_SessionManagerListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_SessionManagerListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnCreateSucceeded, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnCreateSucceeded")]
		public static void SessionManagerListener_OnCreateSucceeded(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnCreateSucceeded(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnCreateFailed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnCreateFailed")]
		public static void SessionManagerListener_OnCreateFailed(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnCreateFailed(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnSessionAdded, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnSessionAdded")]
		public static void SessionManagerListener_OnSessionAdded(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnSessionAdded(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnSessionClosed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnSessionClosed")]
		public static void SessionManagerListener_OnSessionClosed(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnSessionClosed(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnUserJoinedSession, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnUserJoinedSession")]
		public static void SessionManagerListener_OnUserJoinedSession(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnUserJoinedSession(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnUserLeftSession, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnUserLeftSession")]
		public static void SessionManagerListener_OnUserLeftSession(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnUserLeftSession(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnUserChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnUserChanged")]
		public static void SessionManagerListener_OnUserChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnUserChanged(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnServerConnected, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnServerConnected")]
		public static void SessionManagerListener_OnServerConnected(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnServerConnected(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnServerDisconnected, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnServerDisconnected")]
		public static void SessionManagerListener_OnServerDisconnected(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnServerDisconnected(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener")]
		public static void SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_SessionManagerListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_SessionManagerListener")]
		public static global::System.IntPtr new_SessionManagerListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_SessionManagerListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, SessionManagerListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_0__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_1__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_2__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_2__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_3__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_3__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_4__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_4__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_5__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_5__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_6__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_6__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_7__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_7__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SessionManagerListener_SwigDelegateSessionManagerListener_8__Viewer__MixedRealityToolkit_Sharing__SessionManagerListener_SwigDelegateSessionManagerListener_8__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_director_connect")]
		public static void SessionManagerListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_2__Viewer delegate2, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_3__Viewer delegate3, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_4__Viewer delegate4, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_5__Viewer delegate5, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_6__Viewer delegate6, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_7__Viewer delegate7, 
					global::MixedRealityToolkit.Sharing.SessionManagerListener_SwigDelegateSessionManagerListener_8__Viewer delegate8)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			void* unsafe_delegate3 = default(void*);
			void* unsafe_delegate4 = default(void*);
			void* unsafe_delegate5 = default(void*);
			void* unsafe_delegate6 = default(void*);
			void* unsafe_delegate7 = default(void*);
			void* unsafe_delegate8 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_0,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_1,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_2,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate2
								);
				unsafe_delegate3 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_3,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate3
								);
				unsafe_delegate4 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_4,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate4
								);
				unsafe_delegate5 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_5,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate5
								);
				unsafe_delegate6 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_6,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate6
								);
				unsafe_delegate7 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_7,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate7
								);
				unsafe_delegate8 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SessionManagerListener+SwigDelegateSessionManagerListener_8,Viewer, Version=1.0.0.0," +
											" Culture=neutral, PublicKeyToken=null"), 
									delegate8
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManagerListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2, 
									unsafe_delegate3, 
									unsafe_delegate4, 
									unsafe_delegate5, 
									unsafe_delegate6, 
									unsafe_delegate7, 
									unsafe_delegate8
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
				global::System.GC.KeepAlive(delegate3);
				global::System.GC.KeepAlive(delegate4);
				global::System.GC.KeepAlive(delegate5);
				global::System.GC.KeepAlive(delegate6);
				global::System.GC.KeepAlive(delegate7);
				global::System.GC.KeepAlive(delegate8);
			}
		}

		// Signature, SessionManager_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_AddListener")]
		public static void SessionManager_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManager_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManager_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_RemoveListener")]
		public static void SessionManager_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SessionManager_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManager_CreateSession__SWIG_0, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_CreateSession__SWIG_0")]
		public static bool SessionManager_CreateSession__SWIG_0(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManager_CreateSession__SWIG_0(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManager_CreateSession__SWIG_1, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_CreateSession__SWIG_1")]
		public static bool SessionManager_CreateSession__SWIG_1(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManager_CreateSession__SWIG_1(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SessionManager_GetSessionCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_GetSessionCount")]
		public static int SessionManager_GetSessionCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManager_GetSessionCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManager_GetSession, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_GetSession")]
		public static global::System.IntPtr SessionManager_GetSession(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManager_GetSession(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManager_GetCurrentSession, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_GetCurrentSession")]
		public static global::System.IntPtr SessionManager_GetCurrentSession(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManager_GetCurrentSession(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManager_GetCurrentUser, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_GetCurrentUser")]
		public static global::System.IntPtr SessionManager_GetCurrentUser(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManager_GetCurrentUser(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SessionManager_IsServerConnected, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManager_IsServerConnected")]
		public static bool SessionManager_IsServerConnected(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManager_IsServerConnected(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_SessionManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_SessionManager")]
		public static void delete_SessionManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_SessionManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_UserPresenceManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_UserPresenceManagerListener")]
		public static void delete_UserPresenceManagerListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_UserPresenceManagerListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, UserPresenceManagerListener_OnUserPresenceChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManagerListener_OnUserPresenceChanged")]
		public static void UserPresenceManagerListener_OnUserPresenceChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManagerListener_OnUserPresenceChanged(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener")]
		public static void UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, new_UserPresenceManagerListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_UserPresenceManagerListener")]
		public static global::System.IntPtr new_UserPresenceManagerListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_UserPresenceManagerListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, UserPresenceManagerListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_UserPresenceManagerListener_SwigDelegateUserPresenceManagerListener_0__Viewer__MixedRealityToolkit_Sharing__UserPresenceManagerListener_SwigDelegateUserPresenceManagerListener_0__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManagerListener_director_connect")]
		public static void UserPresenceManagerListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.UserPresenceManagerListener_SwigDelegateUserPresenceManagerListener_0__Viewer delegate0)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.UserPresenceManagerListener+SwigDelegateUserPresenceManagerListener_0,Viewer, Versio" +
											"n=1.0.0.0, Culture=neutral, PublicKeyToken=null"), 
									delegate0
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManagerListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
			}
		}

		// Signature, UserPresenceManager_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManager_AddListener")]
		public static void UserPresenceManager_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManager_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, UserPresenceManager_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManager_RemoveListener")]
		public static void UserPresenceManager_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManager_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, UserPresenceManager_GetMuteState, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManager_GetMuteState")]
		public static bool UserPresenceManager_GetMuteState(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.UserPresenceManager_GetMuteState(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, UserPresenceManager_SetMuteState, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManager_SetMuteState")]
		public static void UserPresenceManager_SetMuteState(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManager_SetMuteState(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, UserPresenceManager_SetName, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManager_SetName")]
		public static void UserPresenceManager_SetName(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManager_SetName(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, UserPresenceManager_GetName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManager_GetName")]
		public static global::System.IntPtr UserPresenceManager_GetName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.UserPresenceManager_GetName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, UserPresenceManager_SetUser, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManager_SetUser")]
		public static void UserPresenceManager_SetUser(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.UserPresenceManager_SetUser(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, delete_UserPresenceManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_UserPresenceManager")]
		public static void delete_UserPresenceManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_UserPresenceManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_ClientConfig, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_ClientConfig")]
		public static global::System.IntPtr new_ClientConfig(int jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_ClientConfig(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ClientConfig_GetRole, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_GetRole")]
		public static int ClientConfig_GetRole(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ClientConfig_GetRole(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_GetServerAddress, [fwd] [return] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_GetServerAddress")]
		public static string ClientConfig_GetServerAddress(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe___value = default(byte*);
			string __value = default(string);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = (byte*)global::McgInterop.SharingClient_PInvokes.ClientConfig_GetServerAddress(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = global::System.Runtime.InteropServices.McgMarshal.AnsiStringToString(unsafe___value);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe___value);
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_SetServerAddress, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_SetServerAddress")]
		public static bool ClientConfig_SetServerAddress(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					string jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe_jarg2 = default(byte*);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg2, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ClientConfig_SetServerAddress(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg2);
			}
		}

		// Signature, ClientConfig_GetServerPort, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_GetServerPort")]
		public static int ClientConfig_GetServerPort(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ClientConfig_GetServerPort(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_SetServerPort, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_SetServerPort")]
		public static bool ClientConfig_SetServerPort(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ClientConfig_SetServerPort(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_GetLogWriter, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_GetLogWriter")]
		public static global::System.IntPtr ClientConfig_GetLogWriter(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ClientConfig_GetLogWriter(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_SetLogWriter, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_SetLogWriter")]
		public static void ClientConfig_SetLogWriter(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ClientConfig_SetLogWriter(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, ClientConfig_GetIsAudioEndpoint, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_GetIsAudioEndpoint")]
		public static bool ClientConfig_GetIsAudioEndpoint(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ClientConfig_GetIsAudioEndpoint(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_SetIsAudioEndpoint, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_SetIsAudioEndpoint")]
		public static void ClientConfig_SetIsAudioEndpoint(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ClientConfig_SetIsAudioEndpoint(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_GetProfilerEnabled, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_GetProfilerEnabled")]
		public static bool ClientConfig_GetProfilerEnabled(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.ClientConfig_GetProfilerEnabled(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ClientConfig_SetProfilerEnabled, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ClientConfig_SetProfilerEnabled")]
		public static void ClientConfig_SetProfilerEnabled(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ClientConfig_SetProfilerEnabled(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_ClientConfig, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_ClientConfig")]
		public static void delete_ClientConfig(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_ClientConfig(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, AudioManager_SetMicrophoneEnabled, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "AudioManager_SetMicrophoneEnabled")]
		public static void AudioManager_SetMicrophoneEnabled(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.AudioManager_SetMicrophoneEnabled(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_AudioManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_AudioManager")]
		public static void delete_AudioManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_AudioManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_ProfileManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_ProfileManager")]
		public static void delete_ProfileManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_ProfileManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ProfileManager_BeginRange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ProfileManager_BeginRange")]
		public static void ProfileManager_BeginRange(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					string jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe_jarg2 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg2, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ProfileManager_BeginRange(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg2);
			}
		}

		// Signature, ProfileManager_EndRange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ProfileManager_EndRange")]
		public static void ProfileManager_EndRange(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ProfileManager_EndRange(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, ProfileManager_Log, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ProfileManager_Log")]
		public static void ProfileManager_Log(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2, 
					string jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe_jarg3 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg3 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg3, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.ProfileManager_Log(
									unsafe_jarg1, 
									jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg3);
			}
		}

		// Signature, Profile_BeginRange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Profile_BeginRange")]
		public static void Profile_BeginRange(string jarg1)
		{
			// Setup
			byte* unsafe_jarg1 = default(byte*);
			try
			{
				// Marshalling
				unsafe_jarg1 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg1, true, false);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Profile_BeginRange(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg1);
			}
		}

		// Signature, Profile_EndRange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Profile_EndRange")]
		public static void Profile_EndRange()
		{
			// Marshalling
			// Call to native method
			global::McgInterop.SharingClient_PInvokes.Profile_EndRange();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, new_Profile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_Profile")]
		public static global::System.IntPtr new_Profile()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_Profile();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, delete_Profile, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Profile")]
		public static void delete_Profile(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Profile(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_GetName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_GetName")]
		public static global::System.IntPtr Room_GetName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Room_GetName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_GetID, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_GetID")]
		public static long Room_GetID(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			long unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Room_GetID(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_GetUserCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_GetUserCount")]
		public static int Room_GetUserCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Room_GetUserCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_GetUserID, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_GetUserID")]
		public static int Room_GetUserID(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Room_GetUserID(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_GetKeepOpen, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_GetKeepOpen")]
		public static bool Room_GetKeepOpen(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Room_GetKeepOpen(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_SetKeepOpen, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_SetKeepOpen")]
		public static void Room_SetKeepOpen(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.Room_SetKeepOpen(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_GetAnchorCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_GetAnchorCount")]
		public static int Room_GetAnchorCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Room_GetAnchorCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Room_GetAnchorName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Room_GetAnchorName")]
		public static global::System.IntPtr Room_GetAnchorName(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Room_GetAnchorName(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_Room, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Room")]
		public static void delete_Room(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Room(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, AnchorDownloadRequest_GetAnchorName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "AnchorDownloadRequest_GetAnchorName")]
		public static global::System.IntPtr AnchorDownloadRequest_GetAnchorName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.AnchorDownloadRequest_GetAnchorName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, AnchorDownloadRequest_GetRoom, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "AnchorDownloadRequest_GetRoom")]
		public static global::System.IntPtr AnchorDownloadRequest_GetRoom(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.AnchorDownloadRequest_GetRoom(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, AnchorDownloadRequest_GetDataSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "AnchorDownloadRequest_GetDataSize")]
		public static int AnchorDownloadRequest_GetDataSize(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.AnchorDownloadRequest_GetDataSize(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, AnchorDownloadRequest_GetData, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "AnchorDownloadRequest_GetData")]
		public static bool AnchorDownloadRequest_GetData(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.AnchorDownloadRequest_GetData(
									unsafe_jarg1, 
									jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_AnchorDownloadRequest, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_AnchorDownloadRequest")]
		public static void delete_AnchorDownloadRequest(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_AnchorDownloadRequest(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_RoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_RoomManagerListener")]
		public static void delete_RoomManagerListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_RoomManagerListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnRoomAdded, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnRoomAdded")]
		public static void RoomManagerListener_OnRoomAdded(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnRoomAdded(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnRoomAddedSwigExplicitRoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnRoomAddedSwigExplicitRoomManagerListener")]
		public static void RoomManagerListener_OnRoomAddedSwigExplicitRoomManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnRoomAddedSwigExplicitRoomManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnRoomClosed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnRoomClosed")]
		public static void RoomManagerListener_OnRoomClosed(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnRoomClosed(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnRoomClosedSwigExplicitRoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnRoomClosedSwigExplicitRoomManagerListener")]
		public static void RoomManagerListener_OnRoomClosedSwigExplicitRoomManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnRoomClosedSwigExplicitRoomManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnUserJoinedRoom, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnUserJoinedRoom")]
		public static void RoomManagerListener_OnUserJoinedRoom(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnUserJoinedRoom(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnUserJoinedRoomSwigExplicitRoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnUserJoinedRoomSwigExplicitRoomManagerListener")]
		public static void RoomManagerListener_OnUserJoinedRoomSwigExplicitRoomManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnUserJoinedRoomSwigExplicitRoomManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnUserLeftRoom, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnUserLeftRoom")]
		public static void RoomManagerListener_OnUserLeftRoom(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnUserLeftRoom(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnUserLeftRoomSwigExplicitRoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnUserLeftRoomSwigExplicitRoomManagerListener")]
		public static void RoomManagerListener_OnUserLeftRoomSwigExplicitRoomManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					int jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnUserLeftRoomSwigExplicitRoomManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnAnchorsChanged, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnAnchorsChanged")]
		public static void RoomManagerListener_OnAnchorsChanged(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnAnchorsChanged(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnAnchorsChangedSwigExplicitRoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnAnchorsChangedSwigExplicitRoomManagerListener")]
		public static void RoomManagerListener_OnAnchorsChangedSwigExplicitRoomManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnAnchorsChangedSwigExplicitRoomManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnAnchorsDownloaded, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnAnchorsDownloaded")]
		public static void RoomManagerListener_OnAnchorsDownloaded(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				unsafe_jarg3 = jarg3.handle;
				unsafe_jarg4 = jarg4.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnAnchorsDownloaded(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3, 
									unsafe_jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnAnchorsDownloadedSwigExplicitRoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnAnchorsDownloadedSwigExplicitRoomManagerListener")]
		public static void RoomManagerListener_OnAnchorsDownloadedSwigExplicitRoomManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg4 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				unsafe_jarg3 = jarg3.handle;
				unsafe_jarg4 = jarg4.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnAnchorsDownloadedSwigExplicitRoomManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3, 
									unsafe_jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
				global::System.GC.KeepAlive(jarg4.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnAnchorUploadComplete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnAnchorUploadComplete")]
		public static void RoomManagerListener_OnAnchorUploadComplete(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnAnchorUploadComplete(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, RoomManagerListener_OnAnchorUploadCompleteSwigExplicitRoomManagerListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_OnAnchorUploadCompleteSwigExplicitRoomManagerListener")]
		public static void RoomManagerListener_OnAnchorUploadCompleteSwigExplicitRoomManagerListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					bool jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			sbyte unsafe_jarg2;
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = (jarg2 ? ((sbyte)1) : ((sbyte)0));
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_OnAnchorUploadCompleteSwigExplicitRoomManagerListener(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, new_RoomManagerListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_RoomManagerListener")]
		public static global::System.IntPtr new_RoomManagerListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_RoomManagerListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, RoomManagerListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_RoomManagerListener_SwigDelegateRoomManagerListener_0__Viewer__MixedRealityToolkit_Sharing__RoomManagerListener_SwigDelegateRoomManagerListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_RoomManagerListener_SwigDelegateRoomManagerListener_1__Viewer__MixedRealityToolkit_Sharing__RoomManagerListener_SwigDelegateRoomManagerListener_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_RoomManagerListener_SwigDelegateRoomManagerListener_2__Viewer__MixedRealityToolkit_Sharing__RoomManagerListener_SwigDelegateRoomManagerListener_2__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_RoomManagerListener_SwigDelegateRoomManagerListener_3__Viewer__MixedRealityToolkit_Sharing__RoomManagerListener_SwigDelegateRoomManagerListener_3__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_RoomManagerListener_SwigDelegateRoomManagerListener_4__Viewer__MixedRealityToolkit_Sharing__RoomManagerListener_SwigDelegateRoomManagerListener_4__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_RoomManagerListener_SwigDelegateRoomManagerListener_5__Viewer__MixedRealityToolkit_Sharing__RoomManagerListener_SwigDelegateRoomManagerListener_5__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_RoomManagerListener_SwigDelegateRoomManagerListener_6__Viewer__MixedRealityToolkit_Sharing__RoomManagerListener_SwigDelegateRoomManagerListener_6__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_director_connect")]
		public static void RoomManagerListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.RoomManagerListener_SwigDelegateRoomManagerListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.RoomManagerListener_SwigDelegateRoomManagerListener_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.RoomManagerListener_SwigDelegateRoomManagerListener_2__Viewer delegate2, 
					global::MixedRealityToolkit.Sharing.RoomManagerListener_SwigDelegateRoomManagerListener_3__Viewer delegate3, 
					global::MixedRealityToolkit.Sharing.RoomManagerListener_SwigDelegateRoomManagerListener_4__Viewer delegate4, 
					global::MixedRealityToolkit.Sharing.RoomManagerListener_SwigDelegateRoomManagerListener_5__Viewer delegate5, 
					global::MixedRealityToolkit.Sharing.RoomManagerListener_SwigDelegateRoomManagerListener_6__Viewer delegate6)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			void* unsafe_delegate3 = default(void*);
			void* unsafe_delegate4 = default(void*);
			void* unsafe_delegate5 = default(void*);
			void* unsafe_delegate6 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.RoomManagerListener+SwigDelegateRoomManagerListener_0,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.RoomManagerListener+SwigDelegateRoomManagerListener_1,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.RoomManagerListener+SwigDelegateRoomManagerListener_2,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate2
								);
				unsafe_delegate3 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.RoomManagerListener+SwigDelegateRoomManagerListener_3,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate3
								);
				unsafe_delegate4 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.RoomManagerListener+SwigDelegateRoomManagerListener_4,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate4
								);
				unsafe_delegate5 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.RoomManagerListener+SwigDelegateRoomManagerListener_5,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate5
								);
				unsafe_delegate6 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.RoomManagerListener+SwigDelegateRoomManagerListener_6,Viewer, Version=1.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									delegate6
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManagerListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2, 
									unsafe_delegate3, 
									unsafe_delegate4, 
									unsafe_delegate5, 
									unsafe_delegate6
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
				global::System.GC.KeepAlive(delegate3);
				global::System.GC.KeepAlive(delegate4);
				global::System.GC.KeepAlive(delegate5);
				global::System.GC.KeepAlive(delegate6);
			}
		}

		// Signature, RoomManager_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_AddListener")]
		public static void RoomManager_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManager_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManager_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_RemoveListener")]
		public static void RoomManager_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.RoomManager_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManager_GetRoomCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_GetRoomCount")]
		public static int RoomManager_GetRoomCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_GetRoomCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, RoomManager_GetRoom, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_GetRoom")]
		public static global::System.IntPtr RoomManager_GetRoom(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_GetRoom(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, RoomManager_GetCurrentRoom, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_GetCurrentRoom")]
		public static global::System.IntPtr RoomManager_GetCurrentRoom(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_GetCurrentRoom(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, RoomManager_CreateRoom, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_CreateRoom")]
		public static global::System.IntPtr RoomManager_CreateRoom(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					long jarg3, 
					bool jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			sbyte unsafe_jarg4;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg4 = (jarg4 ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_CreateRoom(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3, 
									unsafe_jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManager_JoinRoom, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_JoinRoom")]
		public static bool RoomManager_JoinRoom(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_JoinRoom(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, RoomManager_LeaveRoom, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_LeaveRoom")]
		public static bool RoomManager_LeaveRoom(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_LeaveRoom(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, RoomManager_DownloadAnchor, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_DownloadAnchor")]
		public static bool RoomManager_DownloadAnchor(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_DownloadAnchor(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, RoomManager_UploadAnchor, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManager_UploadAnchor")]
		public static bool RoomManager_UploadAnchor(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3, 
					global::System.IntPtr jarg4, 
					int jarg5)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManager_UploadAnchor(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3, 
									jarg4, 
									jarg5
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, delete_RoomManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_RoomManager")]
		public static void delete_RoomManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_RoomManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_Settings, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_Settings")]
		public static global::System.IntPtr new_Settings()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_Settings();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, Settings_GetServerAddress, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Settings_GetServerAddress")]
		public static global::System.IntPtr Settings_GetServerAddress(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Settings_GetServerAddress(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Settings_GetServerPort, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Settings_GetServerPort")]
		public static int Settings_GetServerPort(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Settings_GetServerPort(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Settings_GetViewerAddress, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Settings_GetViewerAddress")]
		public static global::System.IntPtr Settings_GetViewerAddress(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Settings_GetViewerAddress(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Settings_GetViewerPort, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Settings_GetViewerPort")]
		public static int Settings_GetViewerPort(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Settings_GetViewerPort(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, Settings_GetLocalUserName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "Settings_GetLocalUserName")]
		public static global::System.IntPtr Settings_GetLocalUserName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.Settings_GetLocalUserName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_Settings, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_Settings")]
		public static void delete_Settings(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_Settings(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_IsReceiver, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_IsReceiver")]
		public static bool PairMaker_IsReceiver(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_IsReceiver(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_IsReceiverSwigExplicitPairMaker, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_IsReceiverSwigExplicitPairMaker")]
		public static bool PairMaker_IsReceiverSwigExplicitPairMaker(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_IsReceiverSwigExplicitPairMaker(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetAddressCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetAddressCount")]
		public static int PairMaker_GetAddressCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetAddressCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetAddress, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetAddress")]
		public static global::System.IntPtr PairMaker_GetAddress(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetAddress(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetAddressSwigExplicitPairMaker, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetAddressSwigExplicitPairMaker")]
		public static global::System.IntPtr PairMaker_GetAddressSwigExplicitPairMaker(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetAddressSwigExplicitPairMaker(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetPort, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetPort")]
		public static ushort PairMaker_GetPort(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			ushort unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetPort(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetPortSwigExplicitPairMaker, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetPortSwigExplicitPairMaker")]
		public static ushort PairMaker_GetPortSwigExplicitPairMaker(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			ushort unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetPortSwigExplicitPairMaker(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_Update, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_Update")]
		public static void PairMaker_Update(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairMaker_Update(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_UpdateSwigExplicitPairMaker, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_UpdateSwigExplicitPairMaker")]
		public static void PairMaker_UpdateSwigExplicitPairMaker(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairMaker_UpdateSwigExplicitPairMaker(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_IsReadyToConnect, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_IsReadyToConnect")]
		public static bool PairMaker_IsReadyToConnect(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_IsReadyToConnect(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_IsReadyToConnectSwigExplicitPairMaker, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_IsReadyToConnectSwigExplicitPairMaker")]
		public static bool PairMaker_IsReadyToConnectSwigExplicitPairMaker(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_IsReadyToConnectSwigExplicitPairMaker(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetLocalKey, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetLocalKey")]
		public static int PairMaker_GetLocalKey(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetLocalKey(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetLocalKeySwigExplicitPairMaker, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetLocalKeySwigExplicitPairMaker")]
		public static int PairMaker_GetLocalKeySwigExplicitPairMaker(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetLocalKeySwigExplicitPairMaker(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetRemoteKey, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetRemoteKey")]
		public static int PairMaker_GetRemoteKey(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetRemoteKey(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_GetRemoteKeySwigExplicitPairMaker, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_GetRemoteKeySwigExplicitPairMaker")]
		public static int PairMaker_GetRemoteKeySwigExplicitPairMaker(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairMaker_GetRemoteKeySwigExplicitPairMaker(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_PairMaker, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_PairMaker")]
		public static global::System.IntPtr new_PairMaker()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_PairMaker();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, delete_PairMaker, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_PairMaker")]
		public static void delete_PairMaker(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_PairMaker(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairMaker_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_0__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_1__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_1__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_2__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_2__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_3__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_3__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_4__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_4__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_5__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_5__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_6__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_6__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairMaker_SwigDelegatePairMaker_7__Viewer__MixedRealityToolkit_Sharing__PairMaker_SwigDelegatePairMaker_7__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairMaker_director_connect")]
		public static void PairMaker_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_1__Viewer delegate1, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_2__Viewer delegate2, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_3__Viewer delegate3, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_4__Viewer delegate4, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_5__Viewer delegate5, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_6__Viewer delegate6, 
					global::MixedRealityToolkit.Sharing.PairMaker_SwigDelegatePairMaker_7__Viewer delegate7)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			void* unsafe_delegate2 = default(void*);
			void* unsafe_delegate3 = default(void*);
			void* unsafe_delegate4 = default(void*);
			void* unsafe_delegate5 = default(void*);
			void* unsafe_delegate6 = default(void*);
			void* unsafe_delegate7 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_0,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_1,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate1
								);
				unsafe_delegate2 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_2,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate2
								);
				unsafe_delegate3 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_3,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate3
								);
				unsafe_delegate4 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_4,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate4
								);
				unsafe_delegate5 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_5,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate5
								);
				unsafe_delegate6 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_6,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate6
								);
				unsafe_delegate7 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairMaker+SwigDelegatePairMaker_7,Viewer, Version=1.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									delegate7
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairMaker_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1, 
									unsafe_delegate2, 
									unsafe_delegate3, 
									unsafe_delegate4, 
									unsafe_delegate5, 
									unsafe_delegate6, 
									unsafe_delegate7
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
				global::System.GC.KeepAlive(delegate2);
				global::System.GC.KeepAlive(delegate3);
				global::System.GC.KeepAlive(delegate4);
				global::System.GC.KeepAlive(delegate5);
				global::System.GC.KeepAlive(delegate6);
				global::System.GC.KeepAlive(delegate7);
			}
		}

		// Signature, PairingListener_PairingConnectionSucceeded, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingListener_PairingConnectionSucceeded")]
		public static void PairingListener_PairingConnectionSucceeded(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingListener_PairingConnectionSucceeded(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingListener_PairingConnectionSucceededSwigExplicitPairingListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingListener_PairingConnectionSucceededSwigExplicitPairingListener")]
		public static void PairingListener_PairingConnectionSucceededSwigExplicitPairingListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingListener_PairingConnectionSucceededSwigExplicitPairingListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingListener_PairingConnectionFailed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingListener_PairingConnectionFailed")]
		public static void PairingListener_PairingConnectionFailed(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingListener_PairingConnectionFailed(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingListener_PairingConnectionFailedSwigExplicitPairingListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingListener_PairingConnectionFailedSwigExplicitPairingListener")]
		public static void PairingListener_PairingConnectionFailedSwigExplicitPairingListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingListener_PairingConnectionFailedSwigExplicitPairingListener(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_PairingListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_PairingListener")]
		public static global::System.IntPtr new_PairingListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_PairingListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, delete_PairingListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_PairingListener")]
		public static void delete_PairingListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_PairingListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairingListener_SwigDelegatePairingListener_0__Viewer__MixedRealityToolkit_Sharing__PairingListener_SwigDelegatePairingListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_PairingListener_SwigDelegatePairingListener_1__Viewer__MixedRealityToolkit_Sharing__PairingListener_SwigDelegatePairingListener_1__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingListener_director_connect")]
		public static void PairingListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.PairingListener_SwigDelegatePairingListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.PairingListener_SwigDelegatePairingListener_1__Viewer delegate1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairingListener+SwigDelegatePairingListener_0,Viewer, Version=1.0.0.0, Culture=neutr" +
											"al, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.PairingListener+SwigDelegatePairingListener_1,Viewer, Version=1.0.0.0, Culture=neutr" +
											"al, PublicKeyToken=null"), 
									delegate1
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
			}
		}

		// Signature, PairingManager_HasPairingInfo, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_HasPairingInfo")]
		public static bool PairingManager_HasPairingInfo(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairingManager_HasPairingInfo(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingManager_ClearPairingInfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_ClearPairingInfo")]
		public static void PairingManager_ClearPairingInfo(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingManager_ClearPairingInfo(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingManager_BeginConnecting, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_BeginConnecting")]
		public static bool PairingManager_BeginConnecting(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairingManager_BeginConnecting(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, PairingManager_CancelConnecting, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_CancelConnecting")]
		public static void PairingManager_CancelConnecting(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingManager_CancelConnecting(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingManager_BeginPairing, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_BeginPairing")]
		public static int PairingManager_BeginPairing(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg3 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				unsafe_jarg3 = jarg3.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairingManager_BeginPairing(
									unsafe_jarg1, 
									unsafe_jarg2, 
									unsafe_jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
				global::System.GC.KeepAlive(jarg3.wrapper);
			}
		}

		// Signature, PairingManager_CancelPairing, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_CancelPairing")]
		public static void PairingManager_CancelPairing(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.PairingManager_CancelPairing(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingManager_IsPairing, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_IsPairing")]
		public static bool PairingManager_IsPairing(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairingManager_IsPairing(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, PairingManager_IsConnected, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingManager_IsConnected")]
		public static bool PairingManager_IsConnected(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.PairingManager_IsConnected(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_PairingManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_PairingManager")]
		public static void delete_PairingManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_PairingManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_Create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_Create")]
		public static global::System.IntPtr SharingManager_Create(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_Create(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetSessionManager, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetSessionManager")]
		public static global::System.IntPtr SharingManager_GetSessionManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetSessionManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetUserPresenceManager, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetUserPresenceManager")]
		public static global::System.IntPtr SharingManager_GetUserPresenceManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetUserPresenceManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetAudioManager, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetAudioManager")]
		public static global::System.IntPtr SharingManager_GetAudioManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetAudioManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetPairingManager, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetPairingManager")]
		public static global::System.IntPtr SharingManager_GetPairingManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetPairingManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetRoomManager, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetRoomManager")]
		public static global::System.IntPtr SharingManager_GetRoomManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetRoomManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetRootSyncObject, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetRootSyncObject")]
		public static global::System.IntPtr SharingManager_GetRootSyncObject(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetRootSyncObject(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_RegisterSyncListener, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_RegisterSyncListener")]
		public static bool SharingManager_RegisterSyncListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_RegisterSyncListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SharingManager_Update, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_Update")]
		public static void SharingManager_Update(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SharingManager_Update(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetPairedConnection, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetPairedConnection")]
		public static global::System.IntPtr SharingManager_GetPairedConnection(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetPairedConnection(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetServerConnection, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetServerConnection")]
		public static global::System.IntPtr SharingManager_GetServerConnection(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetServerConnection(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_GetSettings, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetSettings")]
		public static global::System.IntPtr SharingManager_GetSettings(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetSettings(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_SetServerConnectionInfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_SetServerConnectionInfo")]
		public static void SharingManager_SetServerConnectionInfo(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2, 
					uint jarg3)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SharingManager_SetServerConnectionInfo(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, SharingManager_GetLocalUser, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_GetLocalUser")]
		public static global::System.IntPtr SharingManager_GetLocalUser(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.SharingManager_GetLocalUser(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, SharingManager_SetUserName, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SharingManager_SetUserName")]
		public static void SharingManager_SetUserName(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SharingManager_SetUserName(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, delete_SharingManager, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_SharingManager")]
		public static void delete_SharingManager(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_SharingManager(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_DirectPairConnector__SWIG_0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_DirectPairConnector__SWIG_0")]
		public static global::System.IntPtr new_DirectPairConnector__SWIG_0()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_DirectPairConnector__SWIG_0();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, new_DirectPairConnector__SWIG_1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_DirectPairConnector__SWIG_1")]
		public static global::System.IntPtr new_DirectPairConnector__SWIG_1(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.new_DirectPairConnector__SWIG_1(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_DirectPairConnector__SWIG_2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_DirectPairConnector__SWIG_2")]
		public static global::System.IntPtr new_DirectPairConnector__SWIG_2(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					ushort jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.new_DirectPairConnector__SWIG_2(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairConnector_IsReceiver, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_IsReceiver")]
		public static bool DirectPairConnector_IsReceiver(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairConnector_IsReceiver(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairConnector_GetAddressCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_GetAddressCount")]
		public static int DirectPairConnector_GetAddressCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairConnector_GetAddressCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairConnector_GetAddress, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_GetAddress")]
		public static global::System.IntPtr DirectPairConnector_GetAddress(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairConnector_GetAddress(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairConnector_GetPort, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_GetPort")]
		public static ushort DirectPairConnector_GetPort(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			ushort unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairConnector_GetPort(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairConnector_Update, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_Update")]
		public static void DirectPairConnector_Update(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DirectPairConnector_Update(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairConnector_IsReadyToConnect, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_IsReadyToConnect")]
		public static bool DirectPairConnector_IsReadyToConnect(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairConnector_IsReadyToConnect(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairConnector_SetRemoteAddress, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_SetRemoteAddress")]
		public static void DirectPairConnector_SetRemoteAddress(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DirectPairConnector_SetRemoteAddress(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, DirectPairConnector_SetRemotePort, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_SetRemotePort")]
		public static void DirectPairConnector_SetRemotePort(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					ushort jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DirectPairConnector_SetRemotePort(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_DirectPairConnector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_DirectPairConnector")]
		public static void delete_DirectPairConnector(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_DirectPairConnector(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_DirectPairReceiver__SWIG_0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_DirectPairReceiver__SWIG_0")]
		public static global::System.IntPtr new_DirectPairReceiver__SWIG_0()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_DirectPairReceiver__SWIG_0();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, new_DirectPairReceiver__SWIG_1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_DirectPairReceiver__SWIG_1")]
		public static global::System.IntPtr new_DirectPairReceiver__SWIG_1(ushort jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_DirectPairReceiver__SWIG_1(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, DirectPairReceiver_IsReceiver, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_IsReceiver")]
		public static bool DirectPairReceiver_IsReceiver(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_IsReceiver(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairReceiver_GetAddressCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_GetAddressCount")]
		public static int DirectPairReceiver_GetAddressCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_GetAddressCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairReceiver_GetAddress, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_GetAddress")]
		public static global::System.IntPtr DirectPairReceiver_GetAddress(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					int jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_GetAddress(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairReceiver_GetPort, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_GetPort")]
		public static ushort DirectPairReceiver_GetPort(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			ushort unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_GetPort(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairReceiver_Update, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_Update")]
		public static void DirectPairReceiver_Update(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_Update(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairReceiver_IsReadyToConnect, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_IsReadyToConnect")]
		public static bool DirectPairReceiver_IsReadyToConnect(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_IsReadyToConnect(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DirectPairReceiver_SetIncomingPort, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_SetIncomingPort")]
		public static void DirectPairReceiver_SetIncomingPort(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					ushort jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_SetIncomingPort(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_DirectPairReceiver, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_DirectPairReceiver")]
		public static void delete_DirectPairReceiver(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_DirectPairReceiver(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, TagImage_GetWidth, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "TagImage_GetWidth")]
		public static int TagImage_GetWidth(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.TagImage_GetWidth(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, TagImage_GetHeight, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "TagImage_GetHeight")]
		public static int TagImage_GetHeight(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.TagImage_GetHeight(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, TagImage_CopyImageData, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "TagImage_CopyImageData")]
		public static void TagImage_CopyImageData(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.TagImage_CopyImageData(
									unsafe_jarg1, 
									jarg2, 
									jarg3, 
									jarg4
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_TagImage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_TagImage")]
		public static void delete_TagImage(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_TagImage(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, VisualPairReceiver_Create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "VisualPairReceiver_Create")]
		public static global::System.IntPtr VisualPairReceiver_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.VisualPairReceiver_Create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, VisualPairReceiver_CreateTagImage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "VisualPairReceiver_CreateTagImage")]
		public static global::System.IntPtr VisualPairReceiver_CreateTagImage(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.VisualPairReceiver_CreateTagImage(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_VisualPairReceiver, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_VisualPairReceiver")]
		public static void delete_VisualPairReceiver(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_VisualPairReceiver(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, VisualPairConnector_Create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "VisualPairConnector_Create")]
		public static global::System.IntPtr VisualPairConnector_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.VisualPairConnector_Create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, VisualPairConnector_ProcessImage, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "VisualPairConnector_ProcessImage")]
		public static bool VisualPairConnector_ProcessImage(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.VisualPairConnector_ProcessImage(
									unsafe_jarg1, 
									jarg2, 
									jarg3, 
									jarg4, 
									jarg5
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, VisualPairConnector_IsProcessingImage, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "VisualPairConnector_IsProcessingImage")]
		public static bool VisualPairConnector_IsProcessingImage(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.VisualPairConnector_IsProcessingImage(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_VisualPairConnector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_VisualPairConnector")]
		public static void delete_VisualPairConnector(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_VisualPairConnector(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, new_DiscoveredSystem, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_DiscoveredSystem")]
		public static global::System.IntPtr new_DiscoveredSystem(
					string jarg1, 
					string jarg2, 
					int jarg3)
		{
			// Setup
			byte* unsafe_jarg1 = default(byte*);
			byte* unsafe_jarg2 = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg1, true, false);
				unsafe_jarg2 = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(jarg2, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.new_DiscoveredSystem(
									unsafe_jarg1, 
									unsafe_jarg2, 
									jarg3
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_jarg2);
			}
		}

		// Signature, DiscoveredSystem_GetName, [fwd] [return] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveredSystem_GetName")]
		public static string DiscoveredSystem_GetName(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe___value = default(byte*);
			string __value = default(string);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = (byte*)global::McgInterop.SharingClient_PInvokes.DiscoveredSystem_GetName(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = global::System.Runtime.InteropServices.McgMarshal.AnsiStringToString(unsafe___value);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe___value);
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DiscoveredSystem_GetAddress, [fwd] [return] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveredSystem_GetAddress")]
		public static string DiscoveredSystem_GetAddress(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			byte* unsafe___value = default(byte*);
			string __value = default(string);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = (byte*)global::McgInterop.SharingClient_PInvokes.DiscoveredSystem_GetAddress(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				__value = global::System.Runtime.InteropServices.McgMarshal.AnsiStringToString(unsafe___value);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe___value);
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DiscoveredSystem_GetRole, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveredSystem_GetRole")]
		public static int DiscoveredSystem_GetRole(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DiscoveredSystem_GetRole(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_DiscoveredSystem, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_DiscoveredSystem")]
		public static void delete_DiscoveredSystem(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_DiscoveredSystem(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, delete_DiscoveryClientListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_DiscoveryClientListener")]
		public static void delete_DiscoveryClientListener(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_DiscoveryClientListener(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DiscoveryClientListener_OnRemoteSystemDiscovered, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClientListener_OnRemoteSystemDiscovered")]
		public static void DiscoveryClientListener_OnRemoteSystemDiscovered(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClientListener_OnRemoteSystemDiscovered(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener")]
		public static void DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, DiscoveryClientListener_OnRemoteSystemLost, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClientListener_OnRemoteSystemLost")]
		public static void DiscoveryClientListener_OnRemoteSystemLost(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClientListener_OnRemoteSystemLost(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener")]
		public static void DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, new_DiscoveryClientListener, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "new_DiscoveryClientListener")]
		public static global::System.IntPtr new_DiscoveryClientListener()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.new_DiscoveryClientListener();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, DiscoveryClientListener_director_connect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_DiscoveryClientListener_SwigDelegateDiscoveryClientListener_0__Viewer__MixedRealityToolkit_Sharing__DiscoveryClientListener_SwigDelegateDiscoveryClientListener_0__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_DiscoveryClientListener_SwigDelegateDiscoveryClientListener_1__Viewer__MixedRealityToolkit_Sharing__DiscoveryClientListener_SwigDelegateDiscoveryClientListener_1__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClientListener_director_connect")]
		public static void DiscoveryClientListener_director_connect(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::MixedRealityToolkit.Sharing.DiscoveryClientListener_SwigDelegateDiscoveryClientListener_0__Viewer delegate0, 
					global::MixedRealityToolkit.Sharing.DiscoveryClientListener_SwigDelegateDiscoveryClientListener_1__Viewer delegate1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			void* unsafe_delegate0 = default(void*);
			void* unsafe_delegate1 = default(void*);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_delegate0 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.DiscoveryClientListener+SwigDelegateDiscoveryClientListener_0,Viewer, Version=1.0.0." +
											"0, Culture=neutral, PublicKeyToken=null"), 
									delegate0
								);
				unsafe_delegate1 = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.DiscoveryClientListener+SwigDelegateDiscoveryClientListener_1,Viewer, Version=1.0.0." +
											"0, Culture=neutral, PublicKeyToken=null"), 
									delegate1
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClientListener_director_connect(
									unsafe_jarg1, 
									unsafe_delegate0, 
									unsafe_delegate1
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(delegate0);
				global::System.GC.KeepAlive(delegate1);
			}
		}

		// Signature, DiscoveryClient_Create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClient_Create")]
		public static global::System.IntPtr DiscoveryClient_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.DiscoveryClient_Create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, DiscoveryClient_Ping, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClient_Ping")]
		public static void DiscoveryClient_Ping(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClient_Ping(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DiscoveryClient_GetDiscoveredCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClient_GetDiscoveredCount")]
		public static uint DiscoveryClient_GetDiscoveredCount(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			uint unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DiscoveryClient_GetDiscoveredCount(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DiscoveryClient_GetDiscoveredSystem, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClient_GetDiscoveredSystem")]
		public static global::System.IntPtr DiscoveryClient_GetDiscoveredSystem(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					uint jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				unsafe___value = global::McgInterop.SharingClient_PInvokes.DiscoveryClient_GetDiscoveredSystem(
									unsafe_jarg1, 
									jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DiscoveryClient_Update, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClient_Update")]
		public static void DiscoveryClient_Update(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClient_Update(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, DiscoveryClient_AddListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClient_AddListener")]
		public static void DiscoveryClient_AddListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClient_AddListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, DiscoveryClient_RemoveListener, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClient_RemoveListener")]
		public static void DiscoveryClient_RemoveListener(
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg1, 
					global::System.Runtime.InteropServices.HandleRef__Viewer jarg2)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			global::System.IntPtr unsafe_jarg2 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				unsafe_jarg2 = jarg2.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.DiscoveryClient_RemoveListener(
									unsafe_jarg1, 
									unsafe_jarg2
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
				global::System.GC.KeepAlive(jarg2.wrapper);
			}
		}

		// Signature, delete_DiscoveryClient, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.HandleRefMarshaller] System_Runtime_InteropServices_HandleRef__Viewer____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "delete_DiscoveryClient")]
		public static void delete_DiscoveryClient(global::System.Runtime.InteropServices.HandleRef__Viewer jarg1)
		{
			// Setup
			global::System.IntPtr unsafe_jarg1 = default(global::System.IntPtr);
			try
			{
				// Marshalling
				unsafe_jarg1 = jarg1.handle;
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.delete_DiscoveryClient(unsafe_jarg1);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(jarg1.wrapper);
			}
		}

		// Signature, NetworkConnectionListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "NetworkConnectionListener_SWIGUpcast")]
		public static global::System.IntPtr NetworkConnectionListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.NetworkConnectionListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, BoolElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "BoolElement_SWIGUpcast")]
		public static global::System.IntPtr BoolElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.BoolElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, IntElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntElement_SWIGUpcast")]
		public static global::System.IntPtr IntElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.IntElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, LongElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "LongElement_SWIGUpcast")]
		public static global::System.IntPtr LongElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.LongElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FloatElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatElement_SWIGUpcast")]
		public static global::System.IntPtr FloatElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, DoubleElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DoubleElement_SWIGUpcast")]
		public static global::System.IntPtr DoubleElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.DoubleElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, StringElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringElement_SWIGUpcast")]
		public static global::System.IntPtr StringElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.StringElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, IntArrayListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayListener_SWIGUpcast")]
		public static global::System.IntPtr IntArrayListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.IntArrayListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, IntArrayElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "IntArrayElement_SWIGUpcast")]
		public static global::System.IntPtr IntArrayElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.IntArrayElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FloatArrayListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayListener_SWIGUpcast")]
		public static global::System.IntPtr FloatArrayListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatArrayListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FloatArrayElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "FloatArrayElement_SWIGUpcast")]
		public static global::System.IntPtr FloatArrayElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.FloatArrayElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, StringArrayListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayListener_SWIGUpcast")]
		public static global::System.IntPtr StringArrayListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.StringArrayListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, StringArrayElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "StringArrayElement_SWIGUpcast")]
		public static global::System.IntPtr StringArrayElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.StringArrayElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ObjectElementListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElementListener_SWIGUpcast")]
		public static global::System.IntPtr ObjectElementListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElementListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ObjectElement_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "ObjectElement_SWIGUpcast")]
		public static global::System.IntPtr ObjectElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.ObjectElement_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, SyncListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SyncListener_SWIGUpcast")]
		public static global::System.IntPtr SyncListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.SyncListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, SessionListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionListener_SWIGUpcast")]
		public static global::System.IntPtr SessionListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, SessionManagerListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "SessionManagerListener_SWIGUpcast")]
		public static global::System.IntPtr SessionManagerListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.SessionManagerListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, UserPresenceManagerListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "UserPresenceManagerListener_SWIGUpcast")]
		public static global::System.IntPtr UserPresenceManagerListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.UserPresenceManagerListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, RoomManagerListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "RoomManagerListener_SWIGUpcast")]
		public static global::System.IntPtr RoomManagerListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.RoomManagerListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, PairingListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "PairingListener_SWIGUpcast")]
		public static global::System.IntPtr PairingListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.PairingListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, DirectPairConnector_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairConnector_SWIGUpcast")]
		public static global::System.IntPtr DirectPairConnector_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairConnector_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, DirectPairReceiver_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DirectPairReceiver_SWIGUpcast")]
		public static global::System.IntPtr DirectPairReceiver_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.DirectPairReceiver_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, VisualPairReceiver_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "VisualPairReceiver_SWIGUpcast")]
		public static global::System.IntPtr VisualPairReceiver_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.VisualPairReceiver_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, VisualPairConnector_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "VisualPairConnector_SWIGUpcast")]
		public static global::System.IntPtr VisualPairConnector_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.VisualPairConnector_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, DiscoveryClientListener_SWIGUpcast, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE", "DiscoveryClientListener_SWIGUpcast")]
		public static global::System.IntPtr DiscoveryClientListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.SharingClient_PInvokes.DiscoveryClientListener_SWIGUpcast(jarg1);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, SWIGRegisterExceptionCallbacks_SharingClient, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper", "SWIGRegisterExceptionCallbacks_SharingClient")]
		public static void SWIGRegisterExceptionCallbacks_SharingClient(
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer applicationDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer arithmeticDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer divideByZeroDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer indexOutOfRangeDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer invalidCastDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer invalidOperationDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer ioDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer nullReferenceDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer outOfMemoryDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer overflowDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionDelegate__Viewer systemExceptionDelegate)
		{
			// Setup
			void* unsafe_applicationDelegate = default(void*);
			void* unsafe_arithmeticDelegate = default(void*);
			void* unsafe_divideByZeroDelegate = default(void*);
			void* unsafe_indexOutOfRangeDelegate = default(void*);
			void* unsafe_invalidCastDelegate = default(void*);
			void* unsafe_invalidOperationDelegate = default(void*);
			void* unsafe_ioDelegate = default(void*);
			void* unsafe_nullReferenceDelegate = default(void*);
			void* unsafe_outOfMemoryDelegate = default(void*);
			void* unsafe_overflowDelegate = default(void*);
			void* unsafe_systemExceptionDelegate = default(void*);
			try
			{
				// Marshalling
				unsafe_applicationDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									applicationDelegate
								);
				unsafe_arithmeticDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									arithmeticDelegate
								);
				unsafe_divideByZeroDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									divideByZeroDelegate
								);
				unsafe_indexOutOfRangeDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									indexOutOfRangeDelegate
								);
				unsafe_invalidCastDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									invalidCastDelegate
								);
				unsafe_invalidOperationDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									invalidOperationDelegate
								);
				unsafe_ioDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									ioDelegate
								);
				unsafe_nullReferenceDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									nullReferenceDelegate
								);
				unsafe_outOfMemoryDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									outOfMemoryDelegate
								);
				unsafe_overflowDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									overflowDelegate
								);
				unsafe_systemExceptionDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionDelegate,Viewer, Version=1.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									systemExceptionDelegate
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SWIGRegisterExceptionCallbacks_SharingClient(
									unsafe_applicationDelegate, 
									unsafe_arithmeticDelegate, 
									unsafe_divideByZeroDelegate, 
									unsafe_indexOutOfRangeDelegate, 
									unsafe_invalidCastDelegate, 
									unsafe_invalidOperationDelegate, 
									unsafe_ioDelegate, 
									unsafe_nullReferenceDelegate, 
									unsafe_outOfMemoryDelegate, 
									unsafe_overflowDelegate, 
									unsafe_systemExceptionDelegate
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(applicationDelegate);
				global::System.GC.KeepAlive(arithmeticDelegate);
				global::System.GC.KeepAlive(divideByZeroDelegate);
				global::System.GC.KeepAlive(indexOutOfRangeDelegate);
				global::System.GC.KeepAlive(invalidCastDelegate);
				global::System.GC.KeepAlive(invalidOperationDelegate);
				global::System.GC.KeepAlive(ioDelegate);
				global::System.GC.KeepAlive(nullReferenceDelegate);
				global::System.GC.KeepAlive(outOfMemoryDelegate);
				global::System.GC.KeepAlive(overflowDelegate);
				global::System.GC.KeepAlive(systemExceptionDelegate);
			}
		}

		// Signature, SWIGRegisterExceptionCallbacksArgument_SharingClient, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper", "SWIGRegisterExceptionCallbacksArgument_SharingClient")]
		public static void SWIGRegisterExceptionCallbacksArgument_SharingClient(
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer argumentDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer argumentNullDelegate, 
					global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGExceptionHelper_ExceptionArgumentDelegate__Viewer argumentOutOfRangeDelegate)
		{
			// Setup
			void* unsafe_argumentDelegate = default(void*);
			void* unsafe_argumentNullDelegate = default(void*);
			void* unsafe_argumentOutOfRangeDelegate = default(void*);
			try
			{
				// Marshalling
				unsafe_argumentDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionArgumentDelegate,Viewer, Version=1" +
											".0.0.0, Culture=neutral, PublicKeyToken=null"), 
									argumentDelegate
								);
				unsafe_argumentNullDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionArgumentDelegate,Viewer, Version=1" +
											".0.0.0, Culture=neutral, PublicKeyToken=null"), 
									argumentNullDelegate
								);
				unsafe_argumentOutOfRangeDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGExceptionHelper+ExceptionArgumentDelegate,Viewer, Version=1" +
											".0.0.0, Culture=neutral, PublicKeyToken=null"), 
									argumentOutOfRangeDelegate
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SWIGRegisterExceptionCallbacksArgument_SharingClient(
									unsafe_argumentDelegate, 
									unsafe_argumentNullDelegate, 
									unsafe_argumentOutOfRangeDelegate
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(argumentDelegate);
				global::System.GC.KeepAlive(argumentNullDelegate);
				global::System.GC.KeepAlive(argumentOutOfRangeDelegate);
			}
		}

		// Signature, SWIGRegisterStringCallback_SharingClient, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] MixedRealityToolkit_Sharing_SharingClientPINVOKE_SWIGStringHelper_SWIGStringDelegate__Viewer__MixedRealityToolkit_Sharing__SharingClientPINVOKE_SWIGStringHelper_SWIGStringDelegate__Viewer, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGStringHelper", "SWIGRegisterStringCallback_SharingClient")]
		public static void SWIGRegisterStringCallback_SharingClient(global::MixedRealityToolkit.Sharing.SharingClientPINVOKE_SWIGStringHelper_SWIGStringDelegate__Viewer stringDelegate)
		{
			// Setup
			void* unsafe_stringDelegate = default(void*);
			try
			{
				// Marshalling
				unsafe_stringDelegate = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("MixedRealityToolkit.Sharing.SharingClientPINVOKE+SWIGStringHelper+SWIGStringDelegate,Viewer, Version=1.0.0.0, Cu" +
											"lture=neutral, PublicKeyToken=null"), 
									stringDelegate
								);
				// Call to native method
				global::McgInterop.SharingClient_PInvokes.SWIGRegisterStringCallback_SharingClient(unsafe_stringDelegate);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(stringDelegate);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, _ecvt_s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub, 
					out global::System.IntPtr returnFloatingPointReturn4Thunk, 
					out global::System.IntPtr returnFloatingPointReturn8Thunk)
		{
			// Setup
			global::System.IntPtr unsafe_returnVoidStub;
			global::System.IntPtr unsafe_returnIntegerStub;
			global::System.IntPtr unsafe_commonStub;
			global::System.IntPtr unsafe_returnFloatingPointReturn4Thunk;
			global::System.IntPtr unsafe_returnFloatingPointReturn8Thunk;
			// Marshalling
			// Call to native method
			global::McgInterop.__PInvokes.CallingConventionConverter_GetStubs(
								&(unsafe_returnVoidStub), 
								&(unsafe_returnIntegerStub), 
								&(unsafe_commonStub), 
								&(unsafe_returnFloatingPointReturn4Thunk), 
								&(unsafe_returnFloatingPointReturn8Thunk)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			returnFloatingPointReturn8Thunk = unsafe_returnFloatingPointReturn8Thunk;
			returnFloatingPointReturn4Thunk = unsafe_returnFloatingPointReturn4Thunk;
			commonStub = unsafe_commonStub;
			returnIntegerStub = unsafe_returnIntegerStub;
			returnVoidStub = unsafe_returnVoidStub;
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.Extensions, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = global::McgInterop.McgCoreHelpers.GetArrayForCompat(arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					// Call to native method
					unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.FormatMessage(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			global::System.IntPtr unsafe_ppv;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
								((byte*)rclsid), 
								pUnkOuter, 
								dwClsContext, 
								((byte*)riid), 
								&(unsafe_ppv)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppv = unsafe_ppv;
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ntdll.dll'
	/// </summary>
	public unsafe static partial class ntdll_dll
	{
		// Signature, RtlIpv6AddressToStringExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NtDll", "RtlIpv6AddressToStringExW")]
		public static uint RtlIpv6AddressToStringExW(
					byte[] address, 
					uint scopeId, 
					ushort port, 
					global::System.Text.StringBuilder addressString, 
					ref uint addressStringLength)
		{
			// Setup
			byte* unsafe_address;
			ushort* unsafe_addressString = default(ushort*);
			uint unsafe_addressStringLength;
			uint unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_address = global::McgInterop.McgCoreHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					if (addressString == null)
						unsafe_addressString = null;
					else
					{
						unsafe_addressString = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(addressString.Capacity * 2 
											+ 2)));
						if (unsafe_addressString == null)
							throw new global::System.OutOfMemoryException();
					}
					unsafe_addressStringLength = addressStringLength;
					// Call to native method
					unsafe___value = global::McgInterop.ntdll_dll_PInvokes.RtlIpv6AddressToStringExW(
										unsafe_address, 
										scopeId, 
										port, 
										unsafe_addressString, 
										&(unsafe_addressStringLength)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					addressStringLength = unsafe_addressStringLength;
					if (addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_addressString, 
											addressString
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_addressString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_addressString);
			}
		}

		// Signature, RtlIpv4AddressToStringExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NtDll", "RtlIpv4AddressToStringExW")]
		public static uint RtlIpv4AddressToStringExW(
					byte[] address, 
					ushort port, 
					global::System.Text.StringBuilder addressString, 
					ref uint addressStringLength)
		{
			// Setup
			byte* unsafe_address;
			ushort* unsafe_addressString = default(ushort*);
			uint unsafe_addressStringLength;
			uint unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_address = global::McgInterop.McgCoreHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					if (addressString == null)
						unsafe_addressString = null;
					else
					{
						unsafe_addressString = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(addressString.Capacity * 2 
											+ 2)));
						if (unsafe_addressString == null)
							throw new global::System.OutOfMemoryException();
					}
					unsafe_addressStringLength = addressStringLength;
					// Call to native method
					unsafe___value = global::McgInterop.ntdll_dll_PInvokes.RtlIpv4AddressToStringExW(
										unsafe_address, 
										port, 
										unsafe_addressString, 
										&(unsafe_addressStringLength)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					addressStringLength = unsafe_addressStringLength;
					if (addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_addressString, 
											addressString
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_addressString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_addressString);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.ComInterfaceMarshaller] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl** unsafe_bufferMarshalerPtr = default(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl**);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				bufferMarshalerPtr = (global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgModuleManager.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.12.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	public unsafe static partial class SharingClient_PInvokes
	{
		public static ulong kInvalidSocketID_get()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'kInvalidSocketID_get!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong kInvalidConnectionGUID_get()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'kInvalidConnectionGUID_get!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Receipt(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Receipt!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Receipt_Clear(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Receipt_Clear!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_Receipt()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_Receipt!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_LogManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_LogManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void LogManager_Log(
					global::System.IntPtr jarg1, 
					int jarg2, 
					byte* jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LogManager_Log!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_LogWriter(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_LogWriter!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void LogWriter_WriteLogEntry(
					global::System.IntPtr jarg1, 
					int jarg2, 
					byte* jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LogWriter_WriteLogEntry!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void LogWriter_WriteLogEntrySwigExplicitLogWriter(
					global::System.IntPtr jarg1, 
					int jarg2, 
					byte* jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LogWriter_WriteLogEntrySwigExplicitLogWriter!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_LogWriter()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_LogWriter!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void LogWriter_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LogWriter_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Log_Info(byte* jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Log_Info!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Log_Warning(byte* jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Log_Warning!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Log_Error(byte* jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Log_Error!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_Log()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_Log!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Log(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Log!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Listener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Listener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Listener_UnregisterAll(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Listener_UnregisterAll!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte Listener_IsRegistered(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Listener_IsRegistered!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_Listener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_Listener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long kInvalidXGuid_get()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'kInvalidXGuid_get!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_XString__SWIG_0()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_XString__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_XString__SWIG_1(byte* jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_XString__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_XString(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_XString!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static uint XString_GetLength(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'XString_GetLength!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte XString_IsEqual(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'XString_IsEqual!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* XString_GetString(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'XString_GetString!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Write__SWIG_0(
					global::System.IntPtr jarg1, 
					byte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Write__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Write__SWIG_1(
					global::System.IntPtr jarg1, 
					short jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Write__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Write__SWIG_2(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Write__SWIG_2!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Write__SWIG_3(
					global::System.IntPtr jarg1, 
					long jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Write__SWIG_3!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Write__SWIG_4(
					global::System.IntPtr jarg1, 
					float jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Write__SWIG_4!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Write__SWIG_5(
					global::System.IntPtr jarg1, 
					double jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Write__SWIG_5!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Write__SWIG_6(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Write__SWIG_6!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_WriteArray(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					uint jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_WriteArray!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkOutMessage_Reset(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkOutMessage_Reset!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_NetworkOutMessage(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_NetworkOutMessage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_NetworkInMessage(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_NetworkInMessage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte NetworkInMessage_ReadByte(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadByte!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static short NetworkInMessage_ReadInt16(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadInt16!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int NetworkInMessage_ReadInt32(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadInt32!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long NetworkInMessage_ReadInt64(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadInt64!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float NetworkInMessage_ReadFloat(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadFloat!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double NetworkInMessage_ReadDouble(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadDouble!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr NetworkInMessage_ReadString(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadString!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkInMessage_ReadArray(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					uint jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_ReadArray!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int NetworkInMessage_GetUnreadBitsCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_GetUnreadBitsCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int NetworkInMessage_GetSize(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkInMessage_GetSize!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_NetworkConnectionListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_NetworkConnectionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnConnected(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnConnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnConnectFailed(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnConnectFailed!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnDisconnected(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnDisconnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnMessageReceived(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnMessageReceived!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_NetworkConnectionListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_NetworkConnectionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnectionListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2, 
					void* delegate3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr User_GetName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'User_GetName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int User_GetID(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'User_GetID!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte User_IsValid(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'User_IsValid!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte User_GetMuteState(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'User_GetMuteState!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_User(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_User!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte NetworkConnection_IsConnected(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_IsConnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong NetworkConnection_GetConnectionGUID(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_GetConnectionGUID!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Send__SWIG_0(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5, 
					sbyte jarg6)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Send__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Send__SWIG_1(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Send__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Send__SWIG_2(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Send__SWIG_2!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Send__SWIG_3(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Send__SWIG_3!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Send__SWIG_4(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Send__SWIG_4!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_SendTo__SWIG_0(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					global::System.IntPtr jarg4, 
					int jarg5, 
					int jarg6, 
					int jarg7, 
					sbyte jarg8)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_SendTo__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_SendTo__SWIG_1(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					global::System.IntPtr jarg4, 
					int jarg5, 
					int jarg6, 
					int jarg7)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_SendTo__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_SendTo__SWIG_2(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					global::System.IntPtr jarg4, 
					int jarg5, 
					int jarg6)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_SendTo__SWIG_2!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_SendTo__SWIG_3(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					global::System.IntPtr jarg4, 
					int jarg5)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_SendTo__SWIG_3!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_SendTo__SWIG_4(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					global::System.IntPtr jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_SendTo__SWIG_4!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Broadcast__SWIG_0(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5, 
					sbyte jarg6)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Broadcast__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Broadcast__SWIG_1(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Broadcast__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Broadcast__SWIG_2(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Broadcast__SWIG_2!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Broadcast__SWIG_3(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Broadcast__SWIG_3!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Broadcast__SWIG_4(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Broadcast__SWIG_4!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_AddListener(
					global::System.IntPtr jarg1, 
					byte jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_RemoveListener(
					global::System.IntPtr jarg1, 
					byte jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_AddListenerAsync(
					global::System.IntPtr jarg1, 
					byte jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_AddListenerAsync!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_RemoveListenerAsync(
					global::System.IntPtr jarg1, 
					byte jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_RemoveListenerAsync!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr NetworkConnection_CreateMessage(
					global::System.IntPtr jarg1, 
					byte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_CreateMessage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_ReturnMessage(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_ReturnMessage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void NetworkConnection_Disconnect(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_Disconnect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr NetworkConnection_GetRemoteAddress(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnection_GetRemoteAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_NetworkConnection(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_NetworkConnection!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Element_GetElementType(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Element_GetElementType!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long Element_GetGUID(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Element_GetGUID!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Element_GetName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Element_GetName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Element_GetParent(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Element_GetParent!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte Element_IsValid(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Element_IsValid!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Element(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Element!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr BoolElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'BoolElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte BoolElement_GetValue(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'BoolElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void BoolElement_SetValue(
					global::System.IntPtr jarg1, 
					sbyte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'BoolElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_BoolElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_BoolElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr IntElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int IntElement_GetValue(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntElement_SetValue(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_IntElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_IntElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr LongElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LongElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long LongElement_GetValue(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LongElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void LongElement_SetValue(
					global::System.IntPtr jarg1, 
					long jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LongElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_LongElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_LongElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr FloatElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float FloatElement_GetValue(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatElement_SetValue(
					global::System.IntPtr jarg1, 
					float jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_FloatElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_FloatElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DoubleElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DoubleElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double DoubleElement_GetValue(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DoubleElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DoubleElement_SetValue(
					global::System.IntPtr jarg1, 
					double jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DoubleElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_DoubleElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_DoubleElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr StringElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr StringElement_GetValue(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringElement_SetValue(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_StringElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_StringElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_IntArrayListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_IntArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayListener_OnValueChanged(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_OnValueChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayListener_OnValueChangedSwigExplicitIntArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_OnValueChangedSwigExplicitIntArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayListener_OnValueInserted(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_OnValueInserted!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayListener_OnValueInsertedSwigExplicitIntArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_OnValueInsertedSwigExplicitIntArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayListener_OnValueRemoved(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_OnValueRemoved!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayListener_OnValueRemovedSwigExplicitIntArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_OnValueRemovedSwigExplicitIntArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_IntArrayListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_IntArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr IntArrayElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int IntArrayElement_GetCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_GetCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int IntArrayElement_GetValue(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayElement_SetValue(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayElement_InsertValue(
					global::System.IntPtr jarg1, 
					int jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_InsertValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayElement_RemoveValue(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_RemoveValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayElement_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void IntArrayElement_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_IntArrayElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_IntArrayElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_FloatArrayListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_FloatArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayListener_OnValueChanged(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_OnValueChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayListener_OnValueChangedSwigExplicitFloatArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_OnValueChangedSwigExplicitFloatArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayListener_OnValueInserted(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_OnValueInserted!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayListener_OnValueInsertedSwigExplicitFloatArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_OnValueInsertedSwigExplicitFloatArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayListener_OnValueRemoved(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_OnValueRemoved!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayListener_OnValueRemovedSwigExplicitFloatArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_OnValueRemovedSwigExplicitFloatArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_FloatArrayListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_FloatArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr FloatArrayElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int FloatArrayElement_GetCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_GetCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float FloatArrayElement_GetValue(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayElement_SetValue(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayElement_InsertValue(
					global::System.IntPtr jarg1, 
					int jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_InsertValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayElement_RemoveValue(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_RemoveValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayElement_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void FloatArrayElement_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_FloatArrayElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_FloatArrayElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_StringArrayListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_StringArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayListener_OnValueChanged(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_OnValueChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayListener_OnValueChangedSwigExplicitStringArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_OnValueChangedSwigExplicitStringArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayListener_OnValueInserted(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_OnValueInserted!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayListener_OnValueInsertedSwigExplicitStringArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_OnValueInsertedSwigExplicitStringArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayListener_OnValueRemoved(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_OnValueRemoved!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayListener_OnValueRemovedSwigExplicitStringArrayListener(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_OnValueRemovedSwigExplicitStringArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_StringArrayListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_StringArrayListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr StringArrayElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int StringArrayElement_GetCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_GetCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr StringArrayElement_GetValue(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_GetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayElement_SetValue(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_SetValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayElement_InsertValue(
					global::System.IntPtr jarg1, 
					int jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_InsertValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayElement_RemoveValue(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_RemoveValue!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayElement_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void StringArrayElement_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_StringArrayElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_StringArrayElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_ObjectElementListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_ObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnBoolElementChanged(
					global::System.IntPtr jarg1, 
					long jarg2, 
					sbyte jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnBoolElementChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnBoolElementChangedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					long jarg2, 
					sbyte jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnBoolElementChangedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnIntElementChanged(
					global::System.IntPtr jarg1, 
					long jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnIntElementChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					long jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnLongElementChanged(
					global::System.IntPtr jarg1, 
					long jarg2, 
					long jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnLongElementChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnLongElementChangedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					long jarg2, 
					long jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnLongElementChangedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnFloatElementChanged(
					global::System.IntPtr jarg1, 
					long jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnFloatElementChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					long jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnDoubleElementChanged(
					global::System.IntPtr jarg1, 
					long jarg2, 
					double jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnDoubleElementChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnDoubleElementChangedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					long jarg2, 
					double jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnDoubleElementChangedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnStringElementChanged(
					global::System.IntPtr jarg1, 
					long jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnStringElementChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					long jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnElementAdded(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnElementAdded!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnElementDeleted(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnElementDeleted!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_ObjectElementListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_ObjectElementListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElementListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2, 
					void* delegate3, 
					void* delegate4, 
					void* delegate5, 
					void* delegate6, 
					void* delegate7)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_Cast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_Cast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateBoolElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					sbyte jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateBoolElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateIntElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateIntElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateLongElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					long jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateLongElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateFloatElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					float jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateFloatElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateDoubleElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					double jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateDoubleElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateStringElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateStringElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateObjectElement__SWIG_0(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3, 
					global::System.IntPtr jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateObjectElement__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateObjectElement__SWIG_1(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateObjectElement__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateIntArrayElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateIntArrayElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateFloatArrayElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateFloatArrayElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_CreateStringArrayElement(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_CreateStringArrayElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ObjectElement_GetElementCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_GetElementCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_GetElement__SWIG_0(
					global::System.IntPtr jarg1, 
					long jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_GetElement__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_GetElement__SWIG_1(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_GetElement__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_GetElementAt(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_GetElementAt!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElement_RemoveElement__SWIG_0(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_RemoveElement__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElement_RemoveElement__SWIG_1(
					global::System.IntPtr jarg1, 
					long jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_RemoveElement__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElement_RemoveElementAt(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_RemoveElementAt!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElement_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ObjectElement_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ObjectElement_GetOwnerID(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_GetOwnerID!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_GetObjectType(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_GetObjectType!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_ObjectElement(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_ObjectElement!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SyncListener_OnSyncChangesBegin(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SyncListener_OnSyncChangesBegin!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SyncListener_OnSyncChangesBeginSwigExplicitSyncListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SyncListener_OnSyncChangesBeginSwigExplicitSyncListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SyncListener_OnSyncChangesEnd(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SyncListener_OnSyncChangesEnd!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SyncListener_OnSyncChangesEndSwigExplicitSyncListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SyncListener_OnSyncChangesEndSwigExplicitSyncListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_SyncListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_SyncListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_SyncListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_SyncListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SyncListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SyncListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_SessionListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_SessionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnJoiningSession(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnJoiningSession!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnJoiningSessionSwigExplicitSessionListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnJoiningSessionSwigExplicitSessionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnJoinSucceeded(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnJoinSucceeded!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnJoinSucceededSwigExplicitSessionListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnJoinSucceededSwigExplicitSessionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnJoinFailed(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnJoinFailed!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnJoinFailedSwigExplicitSessionListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnJoinFailedSwigExplicitSessionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnSessionDisconnected(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnSessionDisconnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_OnSessionDisconnectedSwigExplicitSessionListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_OnSessionDisconnectedSwigExplicitSessionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_SessionListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_SessionListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2, 
					void* delegate3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Session_GetMachineSessionState(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_GetMachineSessionState!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Session_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Session_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte Session_IsJoined(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_IsJoined!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte Session_Join(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_Join!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Session_Leave(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_Leave!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Session_GetUserCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_GetUserCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Session_GetUser(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_GetUser!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Session_GetSessionType(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_GetSessionType!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Session_GetName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_GetName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Session_GetSessionNetworkConnection(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Session_GetSessionNetworkConnection!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Session(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Session!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_SessionManagerListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_SessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnCreateSucceeded(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnCreateSucceeded!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnCreateFailed(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnCreateFailed!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnSessionAdded(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnSessionAdded!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnSessionClosed(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnSessionClosed!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnUserJoinedSession(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnUserJoinedSession!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnUserLeftSession(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnUserLeftSession!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnUserChanged(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnUserChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnServerConnected(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnServerConnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnServerDisconnected(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnServerDisconnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_SessionManagerListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_SessionManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManagerListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2, 
					void* delegate3, 
					void* delegate4, 
					void* delegate5, 
					void* delegate6, 
					void* delegate7, 
					void* delegate8)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManager_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SessionManager_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte SessionManager_CreateSession__SWIG_0(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_CreateSession__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte SessionManager_CreateSession__SWIG_1(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_CreateSession__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int SessionManager_GetSessionCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_GetSessionCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SessionManager_GetSession(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_GetSession!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SessionManager_GetCurrentSession(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_GetCurrentSession!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SessionManager_GetCurrentUser(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_GetCurrentUser!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte SessionManager_IsServerConnected(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManager_IsServerConnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_SessionManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_SessionManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_UserPresenceManagerListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_UserPresenceManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManagerListener_OnUserPresenceChanged(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManagerListener_OnUserPresenceChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_UserPresenceManagerListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_UserPresenceManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManagerListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManagerListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManager_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManager_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManager_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManager_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte UserPresenceManager_GetMuteState(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManager_GetMuteState!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManager_SetMuteState(
					global::System.IntPtr jarg1, 
					sbyte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManager_SetMuteState!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManager_SetName(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManager_SetName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr UserPresenceManager_GetName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManager_GetName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void UserPresenceManager_SetUser(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManager_SetUser!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_UserPresenceManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_UserPresenceManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_ClientConfig(int jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_ClientConfig!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ClientConfig_GetRole(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_GetRole!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* ClientConfig_GetServerAddress(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_GetServerAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte ClientConfig_SetServerAddress(
					global::System.IntPtr jarg1, 
					byte* jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_SetServerAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ClientConfig_GetServerPort(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_GetServerPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte ClientConfig_SetServerPort(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_SetServerPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ClientConfig_GetLogWriter(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_GetLogWriter!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ClientConfig_SetLogWriter(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_SetLogWriter!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte ClientConfig_GetIsAudioEndpoint(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_GetIsAudioEndpoint!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ClientConfig_SetIsAudioEndpoint(
					global::System.IntPtr jarg1, 
					sbyte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_SetIsAudioEndpoint!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte ClientConfig_GetProfilerEnabled(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_GetProfilerEnabled!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ClientConfig_SetProfilerEnabled(
					global::System.IntPtr jarg1, 
					sbyte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ClientConfig_SetProfilerEnabled!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_ClientConfig(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_ClientConfig!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void AudioManager_SetMicrophoneEnabled(
					global::System.IntPtr jarg1, 
					sbyte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'AudioManager_SetMicrophoneEnabled!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_AudioManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_AudioManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_ProfileManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_ProfileManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ProfileManager_BeginRange(
					global::System.IntPtr jarg1, 
					byte* jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ProfileManager_BeginRange!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ProfileManager_EndRange(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ProfileManager_EndRange!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ProfileManager_Log(
					global::System.IntPtr jarg1, 
					int jarg2, 
					byte* jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ProfileManager_Log!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Profile_BeginRange(byte* jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Profile_BeginRange!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Profile_EndRange()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Profile_EndRange!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_Profile()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_Profile!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Profile(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Profile!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Room_GetName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_GetName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long Room_GetID(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_GetID!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Room_GetUserCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_GetUserCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Room_GetUserID(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_GetUserID!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte Room_GetKeepOpen(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_GetKeepOpen!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void Room_SetKeepOpen(
					global::System.IntPtr jarg1, 
					sbyte jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_SetKeepOpen!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Room_GetAnchorCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_GetAnchorCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Room_GetAnchorName(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Room_GetAnchorName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Room(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Room!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr AnchorDownloadRequest_GetAnchorName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'AnchorDownloadRequest_GetAnchorName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr AnchorDownloadRequest_GetRoom(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'AnchorDownloadRequest_GetRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int AnchorDownloadRequest_GetDataSize(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'AnchorDownloadRequest_GetDataSize!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte AnchorDownloadRequest_GetData(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'AnchorDownloadRequest_GetData!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_AnchorDownloadRequest(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_AnchorDownloadRequest!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_RoomManagerListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_RoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnRoomAdded(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnRoomAdded!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnRoomAddedSwigExplicitRoomManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnRoomAddedSwigExplicitRoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnRoomClosed(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnRoomClosed!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnRoomClosedSwigExplicitRoomManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnRoomClosedSwigExplicitRoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnUserJoinedRoom(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnUserJoinedRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnUserJoinedRoomSwigExplicitRoomManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnUserJoinedRoomSwigExplicitRoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnUserLeftRoom(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnUserLeftRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnUserLeftRoomSwigExplicitRoomManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnUserLeftRoomSwigExplicitRoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnAnchorsChanged(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnAnchorsChanged!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnAnchorsChangedSwigExplicitRoomManagerListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnAnchorsChangedSwigExplicitRoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnAnchorsDownloaded(
					global::System.IntPtr jarg1, 
					sbyte jarg2, 
					global::System.IntPtr jarg3, 
					global::System.IntPtr jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnAnchorsDownloaded!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnAnchorsDownloadedSwigExplicitRoomManagerListener(
					global::System.IntPtr jarg1, 
					sbyte jarg2, 
					global::System.IntPtr jarg3, 
					global::System.IntPtr jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnAnchorsDownloadedSwigExplicitRoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnAnchorUploadComplete(
					global::System.IntPtr jarg1, 
					sbyte jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnAnchorUploadComplete!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_OnAnchorUploadCompleteSwigExplicitRoomManagerListener(
					global::System.IntPtr jarg1, 
					sbyte jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_OnAnchorUploadCompleteSwigExplicitRoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_RoomManagerListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_RoomManagerListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManagerListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2, 
					void* delegate3, 
					void* delegate4, 
					void* delegate5, 
					void* delegate6)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManager_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void RoomManager_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int RoomManager_GetRoomCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_GetRoomCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr RoomManager_GetRoom(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_GetRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr RoomManager_GetCurrentRoom(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_GetCurrentRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr RoomManager_CreateRoom(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					long jarg3, 
					sbyte jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_CreateRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte RoomManager_JoinRoom(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_JoinRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte RoomManager_LeaveRoom(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_LeaveRoom!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte RoomManager_DownloadAnchor(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_DownloadAnchor!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte RoomManager_UploadAnchor(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3, 
					global::System.IntPtr jarg4, 
					int jarg5)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManager_UploadAnchor!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_RoomManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_RoomManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_Settings()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_Settings!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Settings_GetServerAddress(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Settings_GetServerAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Settings_GetServerPort(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Settings_GetServerPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Settings_GetViewerAddress(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Settings_GetViewerAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int Settings_GetViewerPort(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Settings_GetViewerPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr Settings_GetLocalUserName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Settings_GetLocalUserName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_Settings(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_Settings!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairMaker_IsReceiver(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_IsReceiver!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairMaker_IsReceiverSwigExplicitPairMaker(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_IsReceiverSwigExplicitPairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int PairMaker_GetAddressCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetAddressCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr PairMaker_GetAddress(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr PairMaker_GetAddressSwigExplicitPairMaker(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetAddressSwigExplicitPairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ushort PairMaker_GetPort(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ushort PairMaker_GetPortSwigExplicitPairMaker(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetPortSwigExplicitPairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairMaker_Update(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_Update!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairMaker_UpdateSwigExplicitPairMaker(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_UpdateSwigExplicitPairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairMaker_IsReadyToConnect(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_IsReadyToConnect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairMaker_IsReadyToConnectSwigExplicitPairMaker(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_IsReadyToConnectSwigExplicitPairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int PairMaker_GetLocalKey(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetLocalKey!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int PairMaker_GetLocalKeySwigExplicitPairMaker(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetLocalKeySwigExplicitPairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int PairMaker_GetRemoteKey(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetRemoteKey!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int PairMaker_GetRemoteKeySwigExplicitPairMaker(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_GetRemoteKeySwigExplicitPairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_PairMaker()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_PairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_PairMaker(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_PairMaker!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairMaker_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1, 
					void* delegate2, 
					void* delegate3, 
					void* delegate4, 
					void* delegate5, 
					void* delegate6, 
					void* delegate7)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairMaker_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingListener_PairingConnectionSucceeded(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingListener_PairingConnectionSucceeded!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingListener_PairingConnectionSucceededSwigExplicitPairingListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingListener_PairingConnectionSucceededSwigExplicitPairingListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingListener_PairingConnectionFailed(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingListener_PairingConnectionFailed!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingListener_PairingConnectionFailedSwigExplicitPairingListener(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingListener_PairingConnectionFailedSwigExplicitPairingListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_PairingListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_PairingListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_PairingListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_PairingListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairingManager_HasPairingInfo(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_HasPairingInfo!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingManager_ClearPairingInfo(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_ClearPairingInfo!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairingManager_BeginConnecting(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_BeginConnecting!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingManager_CancelConnecting(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_CancelConnecting!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int PairingManager_BeginPairing(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					global::System.IntPtr jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_BeginPairing!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void PairingManager_CancelPairing(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_CancelPairing!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairingManager_IsPairing(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_IsPairing!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte PairingManager_IsConnected(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingManager_IsConnected!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_PairingManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_PairingManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_Create(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_Create!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetSessionManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetSessionManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetUserPresenceManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetUserPresenceManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetAudioManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetAudioManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetPairingManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetPairingManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetRoomManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetRoomManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetRootSyncObject(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetRootSyncObject!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte SharingManager_RegisterSyncListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_RegisterSyncListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SharingManager_Update(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_Update!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetPairedConnection(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetPairedConnection!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetServerConnection(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetServerConnection!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetSettings(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetSettings!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SharingManager_SetServerConnectionInfo(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					uint jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_SetServerConnectionInfo!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SharingManager_GetLocalUser(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_GetLocalUser!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SharingManager_SetUserName(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SharingManager_SetUserName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_SharingManager(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_SharingManager!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_DirectPairConnector__SWIG_0()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_DirectPairConnector__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_DirectPairConnector__SWIG_1(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_DirectPairConnector__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_DirectPairConnector__SWIG_2(
					global::System.IntPtr jarg1, 
					ushort jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_DirectPairConnector__SWIG_2!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte DirectPairConnector_IsReceiver(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_IsReceiver!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int DirectPairConnector_GetAddressCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_GetAddressCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DirectPairConnector_GetAddress(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_GetAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ushort DirectPairConnector_GetPort(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_GetPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DirectPairConnector_Update(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_Update!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte DirectPairConnector_IsReadyToConnect(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_IsReadyToConnect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DirectPairConnector_SetRemoteAddress(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_SetRemoteAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DirectPairConnector_SetRemotePort(
					global::System.IntPtr jarg1, 
					ushort jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_SetRemotePort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_DirectPairConnector(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_DirectPairConnector!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_DirectPairReceiver__SWIG_0()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_DirectPairReceiver__SWIG_0!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_DirectPairReceiver__SWIG_1(ushort jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_DirectPairReceiver__SWIG_1!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte DirectPairReceiver_IsReceiver(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_IsReceiver!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int DirectPairReceiver_GetAddressCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_GetAddressCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DirectPairReceiver_GetAddress(
					global::System.IntPtr jarg1, 
					int jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_GetAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ushort DirectPairReceiver_GetPort(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_GetPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DirectPairReceiver_Update(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_Update!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte DirectPairReceiver_IsReadyToConnect(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_IsReadyToConnect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DirectPairReceiver_SetIncomingPort(
					global::System.IntPtr jarg1, 
					ushort jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_SetIncomingPort!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_DirectPairReceiver(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_DirectPairReceiver!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int TagImage_GetWidth(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'TagImage_GetWidth!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int TagImage_GetHeight(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'TagImage_GetHeight!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void TagImage_CopyImageData(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'TagImage_CopyImageData!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_TagImage(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_TagImage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr VisualPairReceiver_Create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'VisualPairReceiver_Create!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr VisualPairReceiver_CreateTagImage(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'VisualPairReceiver_CreateTagImage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_VisualPairReceiver(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_VisualPairReceiver!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr VisualPairConnector_Create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'VisualPairConnector_Create!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte VisualPairConnector_ProcessImage(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2, 
					int jarg3, 
					int jarg4, 
					int jarg5)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'VisualPairConnector_ProcessImage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte VisualPairConnector_IsProcessingImage(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'VisualPairConnector_IsProcessingImage!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_VisualPairConnector(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_VisualPairConnector!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_DiscoveredSystem(
					byte* jarg1, 
					byte* jarg2, 
					int jarg3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_DiscoveredSystem!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* DiscoveredSystem_GetName(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveredSystem_GetName!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* DiscoveredSystem_GetAddress(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveredSystem_GetAddress!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int DiscoveredSystem_GetRole(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveredSystem_GetRole!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_DiscoveredSystem(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_DiscoveredSystem!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_DiscoveryClientListener(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_DiscoveryClientListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClientListener_OnRemoteSystemDiscovered(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClientListener_OnRemoteSystemDiscovered!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClientListener_OnRemoteSystemLost(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClientListener_OnRemoteSystemLost!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr new_DiscoveryClientListener()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'new_DiscoveryClientListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClientListener_director_connect(
					global::System.IntPtr jarg1, 
					void* delegate0, 
					void* delegate1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClientListener_director_connect!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DiscoveryClient_Create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClient_Create!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClient_Ping(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClient_Ping!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static uint DiscoveryClient_GetDiscoveredCount(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClient_GetDiscoveredCount!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DiscoveryClient_GetDiscoveredSystem(
					global::System.IntPtr jarg1, 
					uint jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClient_GetDiscoveredSystem!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClient_Update(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClient_Update!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClient_AddListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClient_AddListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void DiscoveryClient_RemoveListener(
					global::System.IntPtr jarg1, 
					global::System.IntPtr jarg2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClient_RemoveListener!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void delete_DiscoveryClient(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'delete_DiscoveryClient!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr NetworkConnectionListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'NetworkConnectionListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr BoolElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'BoolElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr IntElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr LongElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LongElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr FloatElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DoubleElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DoubleElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr StringElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr IntArrayListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr IntArrayElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'IntArrayElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr FloatArrayListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr FloatArrayElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'FloatArrayElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr StringArrayListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr StringArrayElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StringArrayElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElementListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElementListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ObjectElement_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ObjectElement_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SyncListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SyncListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SessionListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SessionManagerListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SessionManagerListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr UserPresenceManagerListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'UserPresenceManagerListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr RoomManagerListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'RoomManagerListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr PairingListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'PairingListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DirectPairConnector_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairConnector_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DirectPairReceiver_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DirectPairReceiver_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr VisualPairReceiver_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'VisualPairReceiver_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr VisualPairConnector_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'VisualPairConnector_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr DiscoveryClientListener_SWIGUpcast(global::System.IntPtr jarg1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DiscoveryClientListener_SWIGUpcast!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SWIGRegisterExceptionCallbacks_SharingClient(
					void* applicationDelegate, 
					void* arithmeticDelegate, 
					void* divideByZeroDelegate, 
					void* indexOutOfRangeDelegate, 
					void* invalidCastDelegate, 
					void* invalidOperationDelegate, 
					void* ioDelegate, 
					void* nullReferenceDelegate, 
					void* outOfMemoryDelegate, 
					void* overflowDelegate, 
					void* systemExceptionDelegate)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SWIGRegisterExceptionCallbacks_SharingClient!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SWIGRegisterExceptionCallbacksArgument_SharingClient(
					void* argumentDelegate, 
					void* argumentNullDelegate, 
					void* argumentOutOfRangeDelegate)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SWIGRegisterExceptionCallbacksArgument_SharingClient!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void SWIGRegisterStringCallback_SharingClient(void* stringDelegate)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SWIGRegisterStringCallback_SharingClient!SharingClient' in assembly 'Viewer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub, 
					global::System.IntPtr* returnFloatingPointReturn4Thunk, 
					global::System.IntPtr* returnFloatingPointReturn8Thunk);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("oleaut32.dll", EntryPoint="#6", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class ntdll_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint RtlIpv6AddressToStringExW(
					byte* address, 
					uint scopeId, 
					ushort port, 
					ushort* addressString, 
					uint* addressStringLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint RtlIpv4AddressToStringExW(
					byte* address, 
					ushort port, 
					ushort* addressString, 
					uint* addressStringLength);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl*** bufferMarshalerPtr);
	}
}

